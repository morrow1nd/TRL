/*
** 2000-05-29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Driver template for the LEMON parser generator.
**
** The "lemon" program processes an LALR(1) input grammar file, then uses
** this template to construct a parser.  The "lemon" program inserts text
** at each "%%" line.  Also, any "P-a-r-s-e" identifer prefix (without the
** interstitial "-" characters) contained in this template is changed into
** the value of the %name directive from the grammar.  Otherwise, the content
** of this template is copied straight through into the generate parser
** source file.
**
** The following is the concatenation of all %include directives from the
** input grammar file:
*/
#include <stdio.h>
/************ Begin %include sections from the grammar ************************/

    #include <cassert>
    #include "TRL/details/TRLSL/Token.h"
    #include "TRL/details/TRLSL/TRLSLGrammarRuleHandler.h"
/**************** End of %include directives **********************************/
/* These constants specify the various numeric values for terminal symbols
** in a format understandable to "makeheaders".  This section is blank unless
** "lemon" is run with the "-m" command-line option.
***************** Begin makeheaders token definitions *************************/
/**************** End makeheaders token definitions ***************************/

/* The next sections is a series of control #defines.
** various aspects of the generated parser.
**    YYCODETYPE         is the data type used to store the integer codes
**                       that represent terminal and non-terminal symbols.
**                       "unsigned char" is used if there are fewer than
**                       256 symbols.  Larger types otherwise.
**    YYNOCODE           is a number of type YYCODETYPE that is not used for
**                       any terminal or nonterminal symbol.
**    YYFALLBACK         If defined, this indicates that one or more tokens
**                       (also known as: "terminal symbols") have fall-back
**                       values which should be used if the original symbol
**                       would not parse.  This permits keywords to sometimes
**                       be used as identifiers, for example.
**    YYACTIONTYPE       is the data type used for "action codes" - numbers
**                       that indicate what to do in response to the next
**                       token.
**    TrlSLParser_TOKENTYPE     is the data type used for minor type for terminal
**                       symbols.  Background: A "minor type" is a semantic
**                       value associated with a terminal or non-terminal
**                       symbols.  For example, for an "ID" terminal symbol,
**                       the minor type might be the name of the identifier.
**                       Each non-terminal can have a different minor type.
**                       Terminal symbols all have the same minor type, though.
**                       This macros defines the minor type for terminal 
**                       symbols.
**    YYMINORTYPE        is the data type used for all minor types.
**                       This is typically a union of many types, one of
**                       which is TrlSLParser_TOKENTYPE.  The entry in the union
**                       for terminal symbols is called "yy0".
**    YYSTACKDEPTH       is the maximum depth of the parser's stack.  If
**                       zero the stack is dynamically sized using realloc()
**    TrlSLParser_ARG_SDECL     A static variable declaration for the %extra_argument
**    TrlSLParser_ARG_PDECL     A parameter declaration for the %extra_argument
**    TrlSLParser_ARG_PARAM     Code to pass %extra_argument as a subroutine parameter
**    TrlSLParser_ARG_STORE     Code to store %extra_argument into yypParser
**    TrlSLParser_ARG_FETCH     Code to extract %extra_argument from yypParser
**    TrlSLParser_CTX_*         As TrlSLParser_ARG_ except for %extra_context
**    YYERRORSYMBOL      is the code number of the error symbol.  If not
**                       defined, then do no error processing.
**    YYNSTATE           the combined number of states.
**    YYNRULE            the number of rules in the grammar
**    YYNTOKEN           Number of terminal symbols
**    YY_MAX_SHIFT       Maximum value for shift actions
**    YY_MIN_SHIFTREDUCE Minimum value for shift-reduce actions
**    YY_MAX_SHIFTREDUCE Maximum value for shift-reduce actions
**    YY_ERROR_ACTION    The yy_action[] code for syntax error
**    YY_ACCEPT_ACTION   The yy_action[] code for accept
**    YY_NO_ACTION       The yy_action[] code for no-op
**    YY_MIN_REDUCE      Minimum value for reduce actions
**    YY_MAX_REDUCE      Maximum value for reduce actions
*/
#ifndef INTERFACE
# define INTERFACE 1
#endif
/************* Begin control #defines *****************************************/
#define YYCODETYPE unsigned char
#define YYNOCODE 167
#define YYACTIONTYPE unsigned short int
#define TrlSLParser_TOKENTYPE TRL::Token*
typedef union {
  int yyinit;
  TrlSLParser_TOKENTYPE yy0;
} YYMINORTYPE;
#ifndef YYSTACKDEPTH
#define YYSTACKDEPTH 100
#endif
#define TrlSLParser_ARG_SDECL
#define TrlSLParser_ARG_PDECL
#define TrlSLParser_ARG_PARAM
#define TrlSLParser_ARG_FETCH
#define TrlSLParser_ARG_STORE
#define TrlSLParser_CTX_SDECL  TRL::TRLSLGrammarRuleHandler* ruleHandler ;
#define TrlSLParser_CTX_PDECL , TRL::TRLSLGrammarRuleHandler* ruleHandler 
#define TrlSLParser_CTX_PARAM ,ruleHandler 
#define TrlSLParser_CTX_FETCH  TRL::TRLSLGrammarRuleHandler* ruleHandler =yypParser->ruleHandler ;
#define TrlSLParser_CTX_STORE yypParser->ruleHandler =ruleHandler ;
#define YYNSTATE             133
#define YYNRULE              199
#define YYNTOKEN             100
#define YY_MAX_SHIFT         132
#define YY_MIN_SHIFTREDUCE   284
#define YY_MAX_SHIFTREDUCE   482
#define YY_ERROR_ACTION      483
#define YY_ACCEPT_ACTION     484
#define YY_NO_ACTION         485
#define YY_MIN_REDUCE        486
#define YY_MAX_REDUCE        684
/************* End control #defines *******************************************/

/* Define the yytestcase() macro to be a no-op if is not already defined
** otherwise.
**
** Applications can choose to define yytestcase() in the %include section
** to a macro that can assist in verifying code coverage.  For production
** code the yytestcase() macro should be turned off.  But it is useful
** for testing.
*/
#ifndef yytestcase
# define yytestcase(X)
#endif


/* Next are the tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N <= YY_MAX_SHIFT             Shift N.  That is, push the lookahead
**                                      token onto the stack and goto state N.
**
**   N between YY_MIN_SHIFTREDUCE       Shift to an arbitrary state then
**     and YY_MAX_SHIFTREDUCE           reduce by rule N-YY_MIN_SHIFTREDUCE.
**
**   N == YY_ERROR_ACTION               A syntax error has occurred.
**
**   N == YY_ACCEPT_ACTION              The parser accepts its input.
**
**   N == YY_NO_ACTION                  No such action.  Denotes unused
**                                      slots in the yy_action[] table.
**
**   N between YY_MIN_REDUCE            Reduce by rule N-YY_MIN_REDUCE
**     and YY_MAX_REDUCE
**
** The action table is constructed as a single large table named yy_action[].
** Given state S and lookahead X, the action is computed as either:
**
**    (A)   N = yy_action[ yy_shift_ofst[S] + X ]
**    (B)   N = yy_default[S]
**
** The (A) formula is preferred.  The B formula is used instead if
** yy_lookahead[yy_shift_ofst[S]+X] is not equal to X.
**
** The formulas above are for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the yy_reduce_ofst[] array is used in place of
** the yy_shift_ofst[] array.
**
** The following are the tables generated in this section:
**
**  yy_action[]        A single table containing all actions.
**  yy_lookahead[]     A table containing the lookahead for each entry in
**                     yy_action.  Used to detect hash collisions.
**  yy_shift_ofst[]    For each state, the offset into yy_action for
**                     shifting terminals.
**  yy_reduce_ofst[]   For each state, the offset into yy_action for
**                     shifting non-terminals after a reduce.
**  yy_default[]       Default action for each state.
**
*********** Begin parsing tables **********************************************/
#define YY_ACTTAB_COUNT (3199)
static const YYACTIONTYPE yy_action[] = {
 /*     0 */    24,  284,  286,  287,  288,  289,   19,  589,   73,   88,
 /*    10 */   681,  590,   49,   48,  405,   21,  313,  314,  315,  316,
 /*    20 */     2,   43,   42,  683,   89,  510,  111,   10,   27,  114,
 /*    30 */   106,  295,  296,   55,  126,  579,   27,  591,  593,  594,
 /*    40 */    62,  592,  593,  594,   62,   38,   37,   36,   35,  453,
 /*    50 */   393,  394,  395,  396,  397,  125,  406,  407,  408,  409,
 /*    60 */   410,  411,  412,  413,  414,  415,  416,  417,  418,  419,
 /*    70 */   420,  421,  422,  423,  424,  425,  426,  427,  428,  429,
 /*    80 */   430,  431,  432,  433,  434,  435,  436,  437,  438,  439,
 /*    90 */     1,  449,  103,    1,  101,   96,   94,   93,   11,   92,
 /*   100 */   284,  286,  287,  288,  289,   19,   21,   12,  112,   28,
 /*   110 */    18,   49,   48,  405,  472,  313,  314,  315,  316,  349,
 /*   120 */   350,  351,  352,  353,  354,  355,  356,  357,  358,  359,
 /*   130 */   570,  469,  575,  468,   54,  577,   15,    4,  591,  593,
 /*   140 */   594,   62,   46,   45,   44,   34,   33,    7,  453,  393,
 /*   150 */   394,  395,  396,  397,  125,  406,  407,  408,  409,  410,
 /*   160 */   411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
 /*   170 */   421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
 /*   180 */   431,  432,  433,  434,  435,  436,  437,  438,  439,    1,
 /*   190 */   450,  103,   21,  101,   96,   94,   93,   11,   92,  284,
 /*   200 */   286,  287,  288,  289,   19,  112,    5,  369,   27,   21,
 /*   210 */    49,   48,  405,   22,  313,  314,  315,  316,   27,   41,
 /*   220 */    40,   13,   17,   98,    6,  300,  290,  569,  482,  575,
 /*   230 */     9,   54,  577,   26,   27,  591,  593,  594,   62,   15,
 /*   240 */    23,   14,  471,   16,  509,   58,   50,  453,  393,  394,
 /*   250 */   395,  396,  397,  125,  406,  407,  408,  409,  410,  411,
 /*   260 */   412,  413,  414,  415,  416,  417,  418,  419,  420,  421,
 /*   270 */   422,  423,  424,  425,  426,  427,  428,  429,  430,  431,
 /*   280 */   432,  433,  434,  435,  436,  437,  438,  439,    1,   27,
 /*   290 */   103,   22,  101,   96,   94,   93,   11,   92,  284,  286,
 /*   300 */   287,  288,  289,   19,  112,  132,  107,   57,   52,   49,
 /*   310 */    48,  405,   22,  313,  314,  315,  316,   61,  364,  294,
 /*   320 */    29,   20,  401,  454,  403,   30,   31,   32,  574,  404,
 /*   330 */   306,  576,  504,  301,  592,  593,  594,   62,  292,  363,
 /*   340 */    59,  485,  485,  485,  485,  485,  453,  393,  394,  395,
 /*   350 */   396,  397,  125,  406,  407,  408,  409,  410,  411,  412,
 /*   360 */   413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
 /*   370 */   423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
 /*   380 */   433,  434,  435,  436,  437,  438,  439,  284,  286,  287,
 /*   390 */   288,  289,   19,  485,  485,  485,  485,  485,   49,   48,
 /*   400 */   405,  485,  313,  314,  315,  316,  485,  485,  485,  485,
 /*   410 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   420 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   430 */   485,  485,  485,  485,  485,  485,  393,  394,  395,  396,
 /*   440 */   397,  125,  406,  407,  408,  409,  410,  411,  412,  413,
 /*   450 */   414,  415,  416,  417,  418,  419,  420,  421,  422,  423,
 /*   460 */   424,  425,  426,  427,  428,  429,  430,  431,  432,  433,
 /*   470 */   434,  435,  436,  437,  438,  439,  284,  286,  287,  288,
 /*   480 */   289,   19,  485,  485,  485,  485,  485,   49,   48,  405,
 /*   490 */   485,  313,  314,  315,  316,  485,  485,  485,  485,  485,
 /*   500 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   510 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   520 */   485,  485,  485,  485,  470,  485,  485,  485,  485,  485,
 /*   530 */   125,  406,  407,  408,  409,  410,  411,  412,  413,  414,
 /*   540 */   415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
 /*   550 */   425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
 /*   560 */   435,  436,  284,  286,  287,  288,  289,   19,  485,  485,
 /*   570 */   400,  485,  485,   49,   48,  405,  485,  313,  314,  315,
 /*   580 */   316,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   590 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   600 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   610 */   485,  485,  485,  485,  485,  485,  125,  406,  407,  408,
 /*   620 */   409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
 /*   630 */   419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
 /*   640 */   429,  430,  431,  432,  433,  434,  435,  436,  284,  286,
 /*   650 */   287,  288,  289,   19,  485,  485,  402,  485,  485,   49,
 /*   660 */    48,  405,  485,  313,  314,  315,  316,  485,  485,  485,
 /*   670 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   680 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   690 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   700 */   485,  485,  125,  406,  407,  408,  409,  410,  411,  412,
 /*   710 */   413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
 /*   720 */   423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
 /*   730 */   433,  434,  435,  436,  284,  286,  287,  288,  289,   19,
 /*   740 */   485,  485,  485,  485,  485,   49,   48,  405,  485,  313,
 /*   750 */   314,  315,  316,  485,  485,  485,  485,  485,  485,  485,
 /*   760 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   770 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   780 */   485,  485,  485,  485,  485,  485,  485,  485,  125,  406,
 /*   790 */   407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
 /*   800 */   417,  418,  419,  420,  421,  422,  423,  424,  425,  426,
 /*   810 */   427,  428,  429,  430,  431,  432,  433,  434,  435,  436,
 /*   820 */   284,  286,  287,  288,  289,   19,  485,  485,  485,  485,
 /*   830 */   485,   49,   48,  128,  485,  313,  314,  315,  316,  485,
 /*   840 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   850 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   860 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   870 */   485,  485,  485,  485,  125,  406,  407,  408,  409,  410,
 /*   880 */   411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
 /*   890 */   421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
 /*   900 */   431,  432,  433,  434,  435,  436,  487,  493,   72,   63,
 /*   910 */   485,  495,  500,  501,   86,  129,   25,  562,  127,  104,
 /*   920 */    56,   47,   69,   85,   84,   66,   77,  124,  123,  121,
 /*   930 */   119,   75,  549,  485,  485,  643,   89,  485,  485,  485,
 /*   940 */   485,  485,  106,  485,  485,   55,  485,  579,  485,  591,
 /*   950 */   593,  594,   62,  646,  653,  644,  645,  647,  648,  649,
 /*   960 */   650,    3,  485,  485,  485,  485,  485,  485,  485,  485,
 /*   970 */   485,  485,  485,  485,  485,  487,  493,   72,   63,  485,
 /*   980 */   495,  500,  501,   86,  129,   25,  562,  127,  104,   56,
 /*   990 */    47,   69,   85,   84,   66,   77,  124,  123,  121,  119,
 /*  1000 */    75,  549,  485,  485,  643,   89,  485,  485,  485,  485,
 /*  1010 */   485,  106,  485,  485,   55,  485,  579,  485,  591,  593,
 /*  1020 */   594,   62,  646,  102,  644,  645,  647,  648,  649,  650,
 /*  1030 */   485,  657,  487,  493,   72,   63,  485,  495,  500,  501,
 /*  1040 */    86,  129,   25,  562,  127,  104,   56,   47,   69,   85,
 /*  1050 */    84,   66,   77,  124,  123,  121,  119,   75,  549,  485,
 /*  1060 */   485,  643,   89,  485,  485,  485,  485,  485,  106,  485,
 /*  1070 */   485,   55,  485,  579,  485,  591,  593,  594,   62,  646,
 /*  1080 */   654,  644,  645,  647,  648,  649,  650,  487,  493,   72,
 /*  1090 */    63,  485,  495,  500,  501,   86,  129,   25,  562,  127,
 /*  1100 */   104,   56,   47,   69,   85,   84,   66,   77,  124,  123,
 /*  1110 */   121,  119,   75,  549,  485,  485,  643,   89,  485,  485,
 /*  1120 */   485,  485,  485,  106,  485,  485,   55,  485,  579,  485,
 /*  1130 */   591,  593,  594,   62,  646,  663,  644,  645,  647,  648,
 /*  1140 */   649,  650,  487,  493,   72,   63,  485,  495,  500,  501,
 /*  1150 */    86,  129,   25,  562,  127,  104,   56,   47,   69,   85,
 /*  1160 */    84,   66,   77,  124,  123,  121,  119,   75,  549,  485,
 /*  1170 */   485,  643,   89,  485,  485,  485,  485,  485,  106,  485,
 /*  1180 */   485,   55,  485,  579,  485,  591,  593,  594,   62,  646,
 /*  1190 */   662,  644,  645,  647,  648,  649,  650,  487,  493,   72,
 /*  1200 */    63,  485,  495,  500,  501,   86,  129,   25,  562,  127,
 /*  1210 */   104,   56,   47,   69,   85,   84,   66,   77,  124,  123,
 /*  1220 */   121,  119,   75,  549,  485,  485,  643,   89,  485,  485,
 /*  1230 */   485,  485,  485,  106,  485,  485,   55,  485,  579,  675,
 /*  1240 */   591,  593,  594,   62,  646,  658,  644,  645,  647,  648,
 /*  1250 */   649,  650,  485,  405,  485,  485,  485,  485,  485,  485,
 /*  1260 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1270 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1280 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  393,
 /*  1290 */   394,  395,  396,  397,  108,  406,  407,  408,  409,  410,
 /*  1300 */   411,  412,  413,  414,  415,  416,  417,  418,  419,  420,
 /*  1310 */   421,  422,  423,  424,  425,  426,  427,  428,  429,  430,
 /*  1320 */   431,  432,  433,  434,  435,  436,  437,  438,  439,  405,
 /*  1330 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1340 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1350 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1360 */   485,  485,  485,  485,  485,  393,  394,  395,  396,  397,
 /*  1370 */   125,  406,  407,  408,  409,  410,  411,  412,  413,  414,
 /*  1380 */   415,  416,  417,  418,  419,  420,  421,  422,  423,  424,
 /*  1390 */   425,  426,  427,  428,  429,  430,  431,  432,  433,  434,
 /*  1400 */   435,  436,  437,  438,  439,  405,  105,  485,  485,  485,
 /*  1410 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1420 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1430 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1440 */   485,  393,  394,  395,  396,  397,  108,  406,  407,  408,
 /*  1450 */   409,  410,  411,  412,  413,  414,  415,  416,  417,  418,
 /*  1460 */   419,  420,  421,  422,  423,  424,  425,  426,  427,  428,
 /*  1470 */   429,  430,  431,  432,  433,  434,  435,  436,  437,  438,
 /*  1480 */   439,  405,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1490 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1500 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1510 */   485,  485,  485,  485,  485,  485,  485,  393,  394,  395,
 /*  1520 */   396,  397,  125,  406,  407,  408,  409,  410,  411,  412,
 /*  1530 */   413,  414,  415,  416,  417,  418,  419,  420,  421,  422,
 /*  1540 */   423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
 /*  1550 */   433,  434,  435,  436,  437,  438,  439,  487,  493,   72,
 /*  1560 */    63,  485,  495,  500,  501,   86,  129,   25,  562,  127,
 /*  1570 */   104,   56,   47,   69,   85,   84,   66,   77,  124,  123,
 /*  1580 */   121,  119,   75,  549,  485,  485,  643,   89,  485,  485,
 /*  1590 */   485,  485,  485,  106,  485,  485,   55,  485,  579,  485,
 /*  1600 */   591,  593,  594,   62,  665,  485,  485,  485,  664,  485,
 /*  1610 */   485,  485,  485,  485,  485,    8,  485,  485,  487,  493,
 /*  1620 */   100,   63,  485,  495,  500,  501,   86,  129,   25,  562,
 /*  1630 */   127,  104,   56,   47,   69,   85,   84,   66,   77,  124,
 /*  1640 */   123,  121,  119,   75,  549,  485,  485,  485,  485,  485,
 /*  1650 */   485,  485,  485,  485,   99,  485,  485,   55,  485,  485,
 /*  1660 */   485,  591,  593,  594,   62,  485,  485,  485,  485,  485,
 /*  1670 */   485,  485,  485,  485,  485,  666,  485,   95,   91,  487,
 /*  1680 */   493,  100,   63,  485,  495,  500,  501,   86,  129,   25,
 /*  1690 */   562,  127,  104,   56,   47,   69,   85,   84,   66,   77,
 /*  1700 */   124,  123,  121,  119,   75,  549,  485,  485,  485,  485,
 /*  1710 */   485,  485,  485,  485,  485,   99,  485,  485,   55,  485,
 /*  1720 */   485,  485,  591,  593,  594,   62,  485,  485,  485,  485,
 /*  1730 */   485,  485,  485,  485,  485,  485,   97,  487,  493,  130,
 /*  1740 */    63,  131,  495,  500,  501,   86,  129,   25,  562,  127,
 /*  1750 */   509,   56,   47,   69,   85,   84,   66,   77,  124,  123,
 /*  1760 */   121,  119,   75,  549,  485,  485,  485,  485,  485,  485,
 /*  1770 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  487,
 /*  1780 */   493,   70,   63,   62,  495,  500,  501,   86,  129,   25,
 /*  1790 */   562,  127,  509,   56,   47,   69,   85,   84,   66,   77,
 /*  1800 */   124,  123,  121,  119,   75,  549,  485,  485,  485,  485,
 /*  1810 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1820 */   485,  485,  485,  485,  485,   62,  487,  493,   90,   63,
 /*  1830 */   485,  495,  500,  501,   86,  129,   25,  562,  127,  509,
 /*  1840 */    56,   47,   69,   85,   84,   66,   77,  124,  123,  121,
 /*  1850 */   119,   75,  549,  485,  485,  485,  485,  485,  485,  485,
 /*  1860 */   485,  487,  493,  485,   63,  485,  495,  500,  501,   86,
 /*  1870 */   129,   25,   62,  127,  509,  519,   47,   69,   85,   78,
 /*  1880 */   487,  493,  485,   63,  485,  495,  500,  501,   86,  129,
 /*  1890 */    25,  642,  127,  509,   56,   47,   69,   85,   84,   66,
 /*  1900 */    77,  124,  123,  121,  119,   75,  549,   62,  485,  485,
 /*  1910 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  1920 */   485,  485,  661,  485,  485,  485,   62,  487,  493,   71,
 /*  1930 */    63,  485,  495,  500,  501,   86,  129,   25,  562,  127,
 /*  1940 */   509,   56,   47,   69,   85,   84,   66,   77,  124,  123,
 /*  1950 */   121,  119,   75,  549,  485,  485,  485,  485,  485,  485,
 /*  1960 */   485,  485,  487,  493,  485,   63,  485,  495,  500,  501,
 /*  1970 */    86,  129,   25,   62,  127,  509,  519,   47,   69,   85,
 /*  1980 */    79,  487,  493,  485,   63,  485,  495,  500,  501,   86,
 /*  1990 */   129,   25,  642,  127,  509,   56,   47,   69,   85,   84,
 /*  2000 */    66,   77,  124,  123,  121,  119,   75,  549,   62,  485,
 /*  2010 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2020 */   485,  485,  485,  588,  485,  485,  485,   62,  487,  493,
 /*  2030 */   485,   63,  485,  495,  500,  501,   86,  129,   25,  642,
 /*  2040 */   127,  509,   56,   47,   69,   85,   84,   66,   77,  124,
 /*  2050 */   123,  121,  119,   75,  549,  485,  485,  485,  485,  485,
 /*  2060 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2070 */   587,  485,  485,  485,   62,  485,  485,  485,  485,  485,
 /*  2080 */   485,  485,  487,  493,  485,   63,  485,  495,  500,  501,
 /*  2090 */    86,  129,   25,  642,  127,  509,   56,   47,   69,   85,
 /*  2100 */    84,   66,   77,  124,  123,  121,  119,   75,  549,  485,
 /*  2110 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2120 */   485,  485,  485,  485,  583,  485,  485,  485,   62,  487,
 /*  2130 */   493,   74,   63,  485,  495,  500,  501,   86,  129,   25,
 /*  2140 */   562,  127,  509,   56,   47,   69,   85,   84,   66,   77,
 /*  2150 */   124,  123,  121,  119,   75,  549,  485,  485,  485,  485,
 /*  2160 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2170 */   485,  487,  493,   87,   63,   62,  495,  500,  501,   86,
 /*  2180 */   129,   25,  562,  127,  509,   56,   47,   69,   85,   84,
 /*  2190 */    66,   77,  124,  123,  121,  119,   75,  549,  485,  485,
 /*  2200 */   485,  485,  485,  485,  485,  485,  487,  493,  485,   63,
 /*  2210 */   485,  495,  500,  501,   86,  129,   25,   62,  127,  509,
 /*  2220 */   519,   47,   69,   85,   80,  487,  493,  485,   63,  485,
 /*  2230 */   495,  500,  501,   86,  129,   25,  642,  127,  509,   56,
 /*  2240 */    47,   69,   85,   84,   66,   77,  124,  123,  121,  119,
 /*  2250 */    75,  549,   62,  485,  485,  485,  485,  485,  485,  485,
 /*  2260 */   485,  485,  485,  485,  485,  485,  485,  582,  485,  485,
 /*  2270 */   485,   62,  487,  493,  485,   63,  485,  495,  500,  501,
 /*  2280 */    86,  129,   25,  485,  127,  509,  519,   47,   69,   85,
 /*  2290 */    84,   66,   77,  124,  123,  121,  119,   75,  564,  485,
 /*  2300 */   115,  485,  485,  485,  485,  485,  485,  487,  493,  485,
 /*  2310 */    63,  485,  495,  500,  501,   86,  129,   25,   62,  127,
 /*  2320 */   509,  519,   47,   69,   85,   81,  487,  493,  485,   63,
 /*  2330 */   485,  495,  500,  501,   86,  129,   25,  485,  127,  509,
 /*  2340 */   519,   47,   69,   85,   84,   66,   77,  124,  123,  121,
 /*  2350 */   119,   75,  564,   62,  116,  485,  485,  485,  485,  485,
 /*  2360 */   485,  485,  485,  485,  485,  485,  485,  485,  487,  493,
 /*  2370 */   485,   63,   62,  495,  500,  501,   86,  129,   25,  548,
 /*  2380 */   127,  509,   56,   47,   69,   85,   84,   66,   77,  124,
 /*  2390 */   123,  121,  119,   75,  549,  485,  485,  485,  485,  485,
 /*  2400 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2410 */   485,  485,  485,  485,   62,  485,  485,  485,  485,  487,
 /*  2420 */   493,  485,   63,  485,  495,  500,  501,   86,  129,   25,
 /*  2430 */   550,  127,  509,   56,   47,   69,   85,   84,   66,   77,
 /*  2440 */   124,  123,  121,  119,   75,  549,  485,  485,  485,  485,
 /*  2450 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2460 */   485,  485,  485,  485,  485,   62,  485,  485,  485,  487,
 /*  2470 */   493,  485,   63,  485,  495,  500,  501,   86,  129,   25,
 /*  2480 */   506,  127,  509,   56,   47,   69,   85,   84,   66,   77,
 /*  2490 */   124,  123,  121,  119,   75,  549,  485,  485,  485,  485,
 /*  2500 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2510 */   485,  485,  485,  485,  485,   62,  485,  485,  485,  485,
 /*  2520 */   487,  493,  485,   63,  485,  495,  500,  501,   86,  129,
 /*  2530 */    25,  507,  127,  509,   56,   47,   69,   85,   84,   66,
 /*  2540 */    77,  124,  123,  121,  119,   75,  549,  485,  485,  485,
 /*  2550 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2560 */   485,  485,  485,  485,  485,  485,   62,  485,  485,  485,
 /*  2570 */   487,  493,  485,   63,  485,  495,  500,  501,   86,  129,
 /*  2580 */    25,  563,  127,  509,   56,   47,   69,   85,   84,   66,
 /*  2590 */    77,  124,  123,  121,  119,   75,  549,  485,  485,  485,
 /*  2600 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2610 */   485,  485,  485,  485,  485,  485,   62,  485,  485,  485,
 /*  2620 */   485,  487,  493,  485,   63,  485,  495,  500,  501,   86,
 /*  2630 */   129,   25,  485,  127,  509,  519,   47,   69,   85,   84,
 /*  2640 */    66,   77,  124,  123,  121,  117,  485,  485,  485,  485,
 /*  2650 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2660 */   485,  485,  485,  485,  485,  485,  485,   62,  485,  485,
 /*  2670 */   485,  487,  493,  485,   63,  485,  495,  500,  501,   86,
 /*  2680 */   129,   25,  485,  127,  509,  519,   47,   69,   85,   84,
 /*  2690 */    66,   77,  124,  123,  118,  485,  485,  485,  485,  485,
 /*  2700 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2710 */   485,  485,  485,  485,  485,  485,  485,   62,  485,  485,
 /*  2720 */   485,  485,  487,  493,  485,   63,  485,  495,  500,  501,
 /*  2730 */    86,  129,   25,  485,  127,  509,  519,   47,   69,   85,
 /*  2740 */    84,   66,   77,  124,  120,  487,  493,  485,   63,  485,
 /*  2750 */   495,  500,  501,   86,  129,   25,  589,  127,  509,  519,
 /*  2760 */    47,   69,   85,   84,   66,   77,  122,  485,   62,  485,
 /*  2770 */   485,  485,  679,   89,   60,  113,   53,  110,  485,  109,
 /*  2780 */   485,  485,   55,  485,  579,  485,  591,  593,  594,   62,
 /*  2790 */   485,   62,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2800 */   485,  485,  485,  485,  484,   39,  676,  678,  680,  485,
 /*  2810 */   485,  485,  485,  485,  485,  485,  485,  485,  487,  493,
 /*  2820 */   485,   63,  485,  495,  500,  501,   86,  129,   25,  485,
 /*  2830 */   127,  509,  519,   47,   69,   85,   84,   66,   76,  487,
 /*  2840 */   493,  485,   63,  485,  495,  500,  501,   86,  129,   25,
 /*  2850 */   485,  127,  509,  519,   47,   69,   85,   84,   64,  485,
 /*  2860 */   487,  493,  485,   63,   62,  495,  500,  501,   86,  129,
 /*  2870 */    25,  589,  127,  509,  519,   47,   69,   85,   84,   65,
 /*  2880 */   485,  485,  485,  485,  485,   62,  485,  679,   89,   60,
 /*  2890 */   113,   53,  110,  485,  109,  485,  485,   55,  485,  579,
 /*  2900 */   485,  591,  593,  594,   62,  485,   62,  485,  485,  485,
 /*  2910 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  2920 */   485,  677,  678,  680,  487,  493,  485,   63,  485,  495,
 /*  2930 */   500,  501,   86,  129,   25,  485,  127,  509,  519,   47,
 /*  2940 */    69,   82,  485,  487,  493,  485,   63,  485,  495,  500,
 /*  2950 */   501,   86,  129,   25,  485,  127,  509,  519,   47,   69,
 /*  2960 */    83,  485,  485,  485,  485,  485,  487,  493,  485,   63,
 /*  2970 */    62,  495,  500,  501,   86,  129,   25,  485,  127,  509,
 /*  2980 */   519,   47,   67,  485,  485,  485,  485,  485,  485,   62,
 /*  2990 */   487,  493,  485,   63,  485,  495,  500,  501,   86,  129,
 /*  3000 */    25,  485,  127,  509,  519,   47,   68,  485,  485,  485,
 /*  3010 */   485,  485,   62,  485,  485,  485,  485,  485,  485,  485,
 /*  3020 */   485,  485,  485,  485,  485,  487,  493,  485,   63,  485,
 /*  3030 */   495,  500,  501,   86,  129,   25,   62,  127,  509,  522,
 /*  3040 */    47,  487,  493,  485,   63,  485,  495,  500,  501,   86,
 /*  3050 */   129,   25,  485,  127,  509,  521,   47,  485,  485,  485,
 /*  3060 */   487,  493,  485,   63,  485,  495,  500,  501,   86,  129,
 /*  3070 */    25,   62,  127,  509,  520,   47,  487,  493,  485,   63,
 /*  3080 */   485,  495,  500,  501,   86,  129,   25,   62,  127,  509,
 /*  3090 */   514,   47,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  3100 */   485,  485,  485,  485,  487,  493,   62,   63,  485,  495,
 /*  3110 */   500,  501,   86,  129,   25,  485,  127,  509,  513,   47,
 /*  3120 */   485,  485,   62,  485,  485,  485,  487,  493,  485,   63,
 /*  3130 */   485,  495,  500,  501,   86,  129,   25,  485,  127,  509,
 /*  3140 */   512,   47,  485,  485,  485,  589,  485,  485,  485,  485,
 /*  3150 */    62,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  3160 */   485,  682,   89,  485,  485,  485,  485,  485,  106,  485,
 /*  3170 */   485,   55,   62,  579,  485,  591,  593,  594,   62,  485,
 /*  3180 */   485,  485,  485,  485,  485,  485,  485,  485,  485,  485,
 /*  3190 */   485,  485,  485,  485,  485,  485,  485,  485,   51,
};
static const YYCODETYPE yy_lookahead[] = {
 /*     0 */   127,    1,    2,    3,    4,    5,    6,  113,  138,  138,
 /*    10 */   149,  113,   12,   13,   14,    8,   16,   17,   18,   19,
 /*    20 */     7,   16,   17,  129,  130,    6,  138,    8,   15,   10,
 /*    30 */   136,   12,   13,  139,  138,  141,   15,  143,  144,  145,
 /*    40 */   146,  143,  144,  145,  146,   25,   26,   27,   28,   49,
 /*    50 */    50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
 /*    60 */    60,   61,   62,   63,   64,   65,   66,   67,   68,   69,
 /*    70 */    70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
 /*    80 */    80,   81,   82,   83,   84,   85,   86,   87,   88,   89,
 /*    90 */    90,   91,   92,   90,   94,   95,   96,   97,   98,   99,
 /*   100 */     1,    2,    3,    4,    5,    6,    8,   49,  113,   35,
 /*   110 */    36,   12,   13,   14,   49,   16,   17,   18,   19,   38,
 /*   120 */    39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
 /*   130 */   135,   49,  137,   49,  139,  140,   38,    7,  143,  144,
 /*   140 */   145,  146,   20,   21,   22,   29,   30,    6,   49,   50,
 /*   150 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*   160 */    61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
 /*   170 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*   180 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*   190 */    91,   92,    8,   94,   95,   96,   97,   98,   99,    1,
 /*   200 */     2,    3,    4,    5,    6,  113,    7,    6,   15,    8,
 /*   210 */    12,   13,   14,    8,   16,   17,   18,   19,   15,   23,
 /*   220 */    24,   38,   38,    1,   93,    7,    7,  135,   49,  137,
 /*   230 */     6,  139,  140,   15,   15,  143,  144,  145,  146,   38,
 /*   240 */    37,    6,   49,   38,    6,    1,   90,   49,   50,   51,
 /*   250 */    52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
 /*   260 */    62,   63,   64,   65,   66,   67,   68,   69,   70,   71,
 /*   270 */    72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
 /*   280 */    82,   83,   84,   85,   86,   87,   88,   89,   90,   15,
 /*   290 */    92,    8,   94,   95,   96,   97,   98,   99,    1,    2,
 /*   300 */     3,    4,    5,    6,  113,   15,    1,    1,   15,   12,
 /*   310 */    13,   14,    8,   16,   17,   18,   19,    1,    7,   11,
 /*   320 */    34,   38,    9,   49,    9,   33,   32,   31,  137,    1,
 /*   330 */     6,  140,    7,    7,  143,  144,  145,  146,    9,   49,
 /*   340 */     1,  167,  167,  167,  167,  167,   49,   50,   51,   52,
 /*   350 */    53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
 /*   360 */    63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
 /*   370 */    73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
 /*   380 */    83,   84,   85,   86,   87,   88,   89,    1,    2,    3,
 /*   390 */     4,    5,    6,  167,  167,  167,  167,  167,   12,   13,
 /*   400 */    14,  167,   16,   17,   18,   19,  167,  167,  167,  167,
 /*   410 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   420 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   430 */   167,  167,  167,  167,  167,  167,   50,   51,   52,   53,
 /*   440 */    54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
 /*   450 */    64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
 /*   460 */    74,   75,   76,   77,   78,   79,   80,   81,   82,   83,
 /*   470 */    84,   85,   86,   87,   88,   89,    1,    2,    3,    4,
 /*   480 */     5,    6,  167,  167,  167,  167,  167,   12,   13,   14,
 /*   490 */   167,   16,   17,   18,   19,  167,  167,  167,  167,  167,
 /*   500 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   510 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   520 */   167,  167,  167,  167,   49,  167,  167,  167,  167,  167,
 /*   530 */    55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
 /*   540 */    65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*   550 */    75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
 /*   560 */    85,   86,    1,    2,    3,    4,    5,    6,  167,  167,
 /*   570 */     9,  167,  167,   12,   13,   14,  167,   16,   17,   18,
 /*   580 */    19,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   590 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   600 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   610 */   167,  167,  167,  167,  167,  167,   55,   56,   57,   58,
 /*   620 */    59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
 /*   630 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
 /*   640 */    79,   80,   81,   82,   83,   84,   85,   86,    1,    2,
 /*   650 */     3,    4,    5,    6,  167,  167,    9,  167,  167,   12,
 /*   660 */    13,   14,  167,   16,   17,   18,   19,  167,  167,  167,
 /*   670 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   680 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   690 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   700 */   167,  167,   55,   56,   57,   58,   59,   60,   61,   62,
 /*   710 */    63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
 /*   720 */    73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
 /*   730 */    83,   84,   85,   86,    1,    2,    3,    4,    5,    6,
 /*   740 */   167,  167,  167,  167,  167,   12,   13,   14,  167,   16,
 /*   750 */    17,   18,   19,  167,  167,  167,  167,  167,  167,  167,
 /*   760 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   770 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   780 */   167,  167,  167,  167,  167,  167,  167,  167,   55,   56,
 /*   790 */    57,   58,   59,   60,   61,   62,   63,   64,   65,   66,
 /*   800 */    67,   68,   69,   70,   71,   72,   73,   74,   75,   76,
 /*   810 */    77,   78,   79,   80,   81,   82,   83,   84,   85,   86,
 /*   820 */     1,    2,    3,    4,    5,    6,  167,  167,  167,  167,
 /*   830 */   167,   12,   13,   14,  167,   16,   17,   18,   19,  167,
 /*   840 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   850 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   860 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   870 */   167,  167,  167,  167,   55,   56,   57,   58,   59,   60,
 /*   880 */    61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
 /*   890 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*   900 */    81,   82,   83,   84,   85,   86,  100,  101,  102,  103,
 /*   910 */   167,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   920 */   114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
 /*   930 */   124,  125,  126,  167,  167,  129,  130,  167,  167,  167,
 /*   940 */   167,  167,  136,  167,  167,  139,  167,  141,  167,  143,
 /*   950 */   144,  145,  146,  147,  148,  149,  150,  151,  152,  153,
 /*   960 */   154,  155,  167,  167,  167,  167,  167,  167,  167,  167,
 /*   970 */   167,  167,  167,  167,  167,  100,  101,  102,  103,  167,
 /*   980 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*   990 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  1000 */   125,  126,  167,  167,  129,  130,  167,  167,  167,  167,
 /*  1010 */   167,  136,  167,  167,  139,  167,  141,  167,  143,  144,
 /*  1020 */   145,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  1030 */   167,  156,  100,  101,  102,  103,  167,  105,  106,  107,
 /*  1040 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  1050 */   118,  119,  120,  121,  122,  123,  124,  125,  126,  167,
 /*  1060 */   167,  129,  130,  167,  167,  167,  167,  167,  136,  167,
 /*  1070 */   167,  139,  167,  141,  167,  143,  144,  145,  146,  147,
 /*  1080 */   148,  149,  150,  151,  152,  153,  154,  100,  101,  102,
 /*  1090 */   103,  167,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1100 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  1110 */   123,  124,  125,  126,  167,  167,  129,  130,  167,  167,
 /*  1120 */   167,  167,  167,  136,  167,  167,  139,  167,  141,  167,
 /*  1130 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  1140 */   153,  154,  100,  101,  102,  103,  167,  105,  106,  107,
 /*  1150 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  1160 */   118,  119,  120,  121,  122,  123,  124,  125,  126,  167,
 /*  1170 */   167,  129,  130,  167,  167,  167,  167,  167,  136,  167,
 /*  1180 */   167,  139,  167,  141,  167,  143,  144,  145,  146,  147,
 /*  1190 */   148,  149,  150,  151,  152,  153,  154,  100,  101,  102,
 /*  1200 */   103,  167,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1210 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  1220 */   123,  124,  125,  126,  167,  167,  129,  130,  167,  167,
 /*  1230 */   167,  167,  167,  136,  167,  167,  139,  167,  141,    0,
 /*  1240 */   143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
 /*  1250 */   153,  154,  167,   14,  167,  167,  167,  167,  167,  167,
 /*  1260 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1270 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1280 */   167,  167,  167,  167,  167,  167,  167,  167,  167,   50,
 /*  1290 */    51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
 /*  1300 */    61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
 /*  1310 */    71,   72,   73,   74,   75,   76,   77,   78,   79,   80,
 /*  1320 */    81,   82,   83,   84,   85,   86,   87,   88,   89,   14,
 /*  1330 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1340 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1350 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1360 */   167,  167,  167,  167,  167,   50,   51,   52,   53,   54,
 /*  1370 */    55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
 /*  1380 */    65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
 /*  1390 */    75,   76,   77,   78,   79,   80,   81,   82,   83,   84,
 /*  1400 */    85,   86,   87,   88,   89,   14,   91,  167,  167,  167,
 /*  1410 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1420 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1430 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1440 */   167,   50,   51,   52,   53,   54,   55,   56,   57,   58,
 /*  1450 */    59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
 /*  1460 */    69,   70,   71,   72,   73,   74,   75,   76,   77,   78,
 /*  1470 */    79,   80,   81,   82,   83,   84,   85,   86,   87,   88,
 /*  1480 */    89,   14,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1490 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1500 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1510 */   167,  167,  167,  167,  167,  167,  167,   50,   51,   52,
 /*  1520 */    53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
 /*  1530 */    63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
 /*  1540 */    73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
 /*  1550 */    83,   84,   85,   86,   87,   88,   89,  100,  101,  102,
 /*  1560 */   103,  167,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1570 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  1580 */   123,  124,  125,  126,  167,  167,  129,  130,  167,  167,
 /*  1590 */   167,  167,  167,  136,  167,  167,  139,  167,  141,  167,
 /*  1600 */   143,  144,  145,  146,  147,  167,  167,  167,  151,  167,
 /*  1610 */   167,  167,  167,  167,  167,  158,  167,  167,  100,  101,
 /*  1620 */   102,  103,  167,  105,  106,  107,  108,  109,  110,  111,
 /*  1630 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*  1640 */   122,  123,  124,  125,  126,  167,  167,  167,  167,  167,
 /*  1650 */   167,  167,  167,  167,  136,  167,  167,  139,  167,  167,
 /*  1660 */   167,  143,  144,  145,  146,  167,  167,  167,  167,  167,
 /*  1670 */   167,  167,  167,  167,  167,  157,  167,  159,  160,  100,
 /*  1680 */   101,  102,  103,  167,  105,  106,  107,  108,  109,  110,
 /*  1690 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  1700 */   121,  122,  123,  124,  125,  126,  167,  167,  167,  167,
 /*  1710 */   167,  167,  167,  167,  167,  136,  167,  167,  139,  167,
 /*  1720 */   167,  167,  143,  144,  145,  146,  167,  167,  167,  167,
 /*  1730 */   167,  167,  167,  167,  167,  167,  157,  100,  101,  102,
 /*  1740 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1750 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  1760 */   123,  124,  125,  126,  167,  167,  167,  167,  167,  167,
 /*  1770 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  100,
 /*  1780 */   101,  102,  103,  146,  105,  106,  107,  108,  109,  110,
 /*  1790 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  1800 */   121,  122,  123,  124,  125,  126,  167,  167,  167,  167,
 /*  1810 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1820 */   167,  167,  167,  167,  167,  146,  100,  101,  102,  103,
 /*  1830 */   167,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  1840 */   114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
 /*  1850 */   124,  125,  126,  167,  167,  167,  167,  167,  167,  167,
 /*  1860 */   167,  100,  101,  167,  103,  167,  105,  106,  107,  108,
 /*  1870 */   109,  110,  146,  112,  113,  114,  115,  116,  117,  118,
 /*  1880 */   100,  101,  167,  103,  167,  105,  106,  107,  108,  109,
 /*  1890 */   110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  1900 */   120,  121,  122,  123,  124,  125,  126,  146,  167,  167,
 /*  1910 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  1920 */   167,  167,  142,  167,  167,  167,  146,  100,  101,  102,
 /*  1930 */   103,  167,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1940 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  1950 */   123,  124,  125,  126,  167,  167,  167,  167,  167,  167,
 /*  1960 */   167,  167,  100,  101,  167,  103,  167,  105,  106,  107,
 /*  1970 */   108,  109,  110,  146,  112,  113,  114,  115,  116,  117,
 /*  1980 */   118,  100,  101,  167,  103,  167,  105,  106,  107,  108,
 /*  1990 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  2000 */   119,  120,  121,  122,  123,  124,  125,  126,  146,  167,
 /*  2010 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2020 */   167,  167,  167,  142,  167,  167,  167,  146,  100,  101,
 /*  2030 */   167,  103,  167,  105,  106,  107,  108,  109,  110,  111,
 /*  2040 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*  2050 */   122,  123,  124,  125,  126,  167,  167,  167,  167,  167,
 /*  2060 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2070 */   142,  167,  167,  167,  146,  167,  167,  167,  167,  167,
 /*  2080 */   167,  167,  100,  101,  167,  103,  167,  105,  106,  107,
 /*  2090 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  2100 */   118,  119,  120,  121,  122,  123,  124,  125,  126,  167,
 /*  2110 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2120 */   167,  167,  167,  167,  142,  167,  167,  167,  146,  100,
 /*  2130 */   101,  102,  103,  167,  105,  106,  107,  108,  109,  110,
 /*  2140 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  2150 */   121,  122,  123,  124,  125,  126,  167,  167,  167,  167,
 /*  2160 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2170 */   167,  100,  101,  102,  103,  146,  105,  106,  107,  108,
 /*  2180 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  2190 */   119,  120,  121,  122,  123,  124,  125,  126,  167,  167,
 /*  2200 */   167,  167,  167,  167,  167,  167,  100,  101,  167,  103,
 /*  2210 */   167,  105,  106,  107,  108,  109,  110,  146,  112,  113,
 /*  2220 */   114,  115,  116,  117,  118,  100,  101,  167,  103,  167,
 /*  2230 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2240 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  2250 */   125,  126,  146,  167,  167,  167,  167,  167,  167,  167,
 /*  2260 */   167,  167,  167,  167,  167,  167,  167,  142,  167,  167,
 /*  2270 */   167,  146,  100,  101,  167,  103,  167,  105,  106,  107,
 /*  2280 */   108,  109,  110,  167,  112,  113,  114,  115,  116,  117,
 /*  2290 */   118,  119,  120,  121,  122,  123,  124,  125,  126,  167,
 /*  2300 */   128,  167,  167,  167,  167,  167,  167,  100,  101,  167,
 /*  2310 */   103,  167,  105,  106,  107,  108,  109,  110,  146,  112,
 /*  2320 */   113,  114,  115,  116,  117,  118,  100,  101,  167,  103,
 /*  2330 */   167,  105,  106,  107,  108,  109,  110,  167,  112,  113,
 /*  2340 */   114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
 /*  2350 */   124,  125,  126,  146,  128,  167,  167,  167,  167,  167,
 /*  2360 */   167,  167,  167,  167,  167,  167,  167,  167,  100,  101,
 /*  2370 */   167,  103,  146,  105,  106,  107,  108,  109,  110,  111,
 /*  2380 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*  2390 */   122,  123,  124,  125,  126,  167,  167,  167,  167,  167,
 /*  2400 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2410 */   167,  167,  167,  167,  146,  167,  167,  167,  167,  100,
 /*  2420 */   101,  167,  103,  167,  105,  106,  107,  108,  109,  110,
 /*  2430 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  2440 */   121,  122,  123,  124,  125,  126,  167,  167,  167,  167,
 /*  2450 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2460 */   167,  167,  167,  167,  167,  146,  167,  167,  167,  100,
 /*  2470 */   101,  167,  103,  167,  105,  106,  107,  108,  109,  110,
 /*  2480 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  2490 */   121,  122,  123,  124,  125,  126,  167,  167,  167,  167,
 /*  2500 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2510 */   167,  167,  167,  167,  167,  146,  167,  167,  167,  167,
 /*  2520 */   100,  101,  167,  103,  167,  105,  106,  107,  108,  109,
 /*  2530 */   110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  2540 */   120,  121,  122,  123,  124,  125,  126,  167,  167,  167,
 /*  2550 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2560 */   167,  167,  167,  167,  167,  167,  146,  167,  167,  167,
 /*  2570 */   100,  101,  167,  103,  167,  105,  106,  107,  108,  109,
 /*  2580 */   110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  2590 */   120,  121,  122,  123,  124,  125,  126,  167,  167,  167,
 /*  2600 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2610 */   167,  167,  167,  167,  167,  167,  146,  167,  167,  167,
 /*  2620 */   167,  100,  101,  167,  103,  167,  105,  106,  107,  108,
 /*  2630 */   109,  110,  167,  112,  113,  114,  115,  116,  117,  118,
 /*  2640 */   119,  120,  121,  122,  123,  124,  167,  167,  167,  167,
 /*  2650 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2660 */   167,  167,  167,  167,  167,  167,  167,  146,  167,  167,
 /*  2670 */   167,  100,  101,  167,  103,  167,  105,  106,  107,  108,
 /*  2680 */   109,  110,  167,  112,  113,  114,  115,  116,  117,  118,
 /*  2690 */   119,  120,  121,  122,  123,  167,  167,  167,  167,  167,
 /*  2700 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2710 */   167,  167,  167,  167,  167,  167,  167,  146,  167,  167,
 /*  2720 */   167,  167,  100,  101,  167,  103,  167,  105,  106,  107,
 /*  2730 */   108,  109,  110,  167,  112,  113,  114,  115,  116,  117,
 /*  2740 */   118,  119,  120,  121,  122,  100,  101,  167,  103,  167,
 /*  2750 */   105,  106,  107,  108,  109,  110,  113,  112,  113,  114,
 /*  2760 */   115,  116,  117,  118,  119,  120,  121,  167,  146,  167,
 /*  2770 */   167,  167,  129,  130,  131,  132,  133,  134,  167,  136,
 /*  2780 */   167,  167,  139,  167,  141,  167,  143,  144,  145,  146,
 /*  2790 */   167,  146,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2800 */   167,  167,  167,  167,  161,  162,  163,  164,  165,  167,
 /*  2810 */   167,  167,  167,  167,  167,  167,  167,  167,  100,  101,
 /*  2820 */   167,  103,  167,  105,  106,  107,  108,  109,  110,  167,
 /*  2830 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  100,
 /*  2840 */   101,  167,  103,  167,  105,  106,  107,  108,  109,  110,
 /*  2850 */   167,  112,  113,  114,  115,  116,  117,  118,  119,  167,
 /*  2860 */   100,  101,  167,  103,  146,  105,  106,  107,  108,  109,
 /*  2870 */   110,  113,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  2880 */   167,  167,  167,  167,  167,  146,  167,  129,  130,  131,
 /*  2890 */   132,  133,  134,  167,  136,  167,  167,  139,  167,  141,
 /*  2900 */   167,  143,  144,  145,  146,  167,  146,  167,  167,  167,
 /*  2910 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  2920 */   167,  163,  164,  165,  100,  101,  167,  103,  167,  105,
 /*  2930 */   106,  107,  108,  109,  110,  167,  112,  113,  114,  115,
 /*  2940 */   116,  117,  167,  100,  101,  167,  103,  167,  105,  106,
 /*  2950 */   107,  108,  109,  110,  167,  112,  113,  114,  115,  116,
 /*  2960 */   117,  167,  167,  167,  167,  167,  100,  101,  167,  103,
 /*  2970 */   146,  105,  106,  107,  108,  109,  110,  167,  112,  113,
 /*  2980 */   114,  115,  116,  167,  167,  167,  167,  167,  167,  146,
 /*  2990 */   100,  101,  167,  103,  167,  105,  106,  107,  108,  109,
 /*  3000 */   110,  167,  112,  113,  114,  115,  116,  167,  167,  167,
 /*  3010 */   167,  167,  146,  167,  167,  167,  167,  167,  167,  167,
 /*  3020 */   167,  167,  167,  167,  167,  100,  101,  167,  103,  167,
 /*  3030 */   105,  106,  107,  108,  109,  110,  146,  112,  113,  114,
 /*  3040 */   115,  100,  101,  167,  103,  167,  105,  106,  107,  108,
 /*  3050 */   109,  110,  167,  112,  113,  114,  115,  167,  167,  167,
 /*  3060 */   100,  101,  167,  103,  167,  105,  106,  107,  108,  109,
 /*  3070 */   110,  146,  112,  113,  114,  115,  100,  101,  167,  103,
 /*  3080 */   167,  105,  106,  107,  108,  109,  110,  146,  112,  113,
 /*  3090 */   114,  115,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  3100 */   167,  167,  167,  167,  100,  101,  146,  103,  167,  105,
 /*  3110 */   106,  107,  108,  109,  110,  167,  112,  113,  114,  115,
 /*  3120 */   167,  167,  146,  167,  167,  167,  100,  101,  167,  103,
 /*  3130 */   167,  105,  106,  107,  108,  109,  110,  167,  112,  113,
 /*  3140 */   114,  115,  167,  167,  167,  113,  167,  167,  167,  167,
 /*  3150 */   146,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  3160 */   167,  129,  130,  167,  167,  167,  167,  167,  136,  167,
 /*  3170 */   167,  139,  146,  141,  167,  143,  144,  145,  146,  167,
 /*  3180 */   167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
 /*  3190 */   167,  167,  167,  167,  167,  167,  167,  167,  166,
};
#define YY_SHIFT_COUNT    (132)
#define YY_SHIFT_MIN      (0)
#define YY_SHIFT_MAX      (1467)
static const unsigned short int yy_shift_ofst[] = {
 /*     0 */  1391,    0,  198,   99,  198,  198,  198,  297,  386,  386,
 /*    10 */   733,  475,  733,  733,  733,  733,  733,  733,  733,  733,
 /*    20 */   733,  561,  647,  733,  733,  819,  733,  733,  733,  733,
 /*    30 */   733,  733,  733,  733,  733,  733,  733,  733,  733, 1239,
 /*    40 */   733,  733,  733,  733,  733,  733,  733,  733,  733,  733,
 /*    50 */  1467, 1315, 1467, 1467, 1467, 1467,   81,  201,   98,  184,
 /*    60 */     3,    7,    7,   19,   20,   20,   20,  122,  122,  122,
 /*    70 */   193,   13,  274,  205,  203,   74,  116,  116,  196,  196,
 /*    80 */   196,  196,    5,    5,  196,    5,  218,  219,  283,  290,
 /*    90 */    21,   58,   65,   82,   84,  130,  141,  199,  183,  222,
 /*   100 */    21,  224,  131,  235,  238,  179,  244,  156,  305,  306,
 /*   110 */   293,  304,  316,  311,  308,  313,  315,  286,  292,  286,
 /*   120 */   294,  292,  296,  294,  296,  328,  304,  324,  325,  326,
 /*   130 */    21,  329,  339,
};
#define YY_REDUCE_COUNT (62)
#define YY_REDUCE_MIN   (-139)
#define YY_REDUCE_MAX   (3032)
static const short yy_reduce_ofst[] = {
 /*     0 */  2643,  806,  875,  932,  987, 1042, 1097, 1457, 1518, 1579,
 /*    10 */  1637, 1679, 1726, 1780, 1827, 1881, 1928, 1982, 2029, 2071,
 /*    20 */  2125, 2172, 2226, 2268, 2319, 2369, 2420, 2470, 2521, 2571,
 /*    30 */  2622, 2645, 2718, 2739, 2760, 1761, 1862, 2106, 2207, 2758,
 /*    40 */  2824, 2843, 2866, 2890, 2925, 2941, 2960, 2976, 3004, 3026,
 /*    50 */  3032, -106,   -5,   92,  191, -102, -127, -130, -130, -129,
 /*    60 */  -139, -112, -104,
};
static const YYACTIONTYPE yy_default[] = {
 /*     0 */   483,  483,  483,  483,  483,  483,  483,  483,  667,  483,
 /*    10 */   483,  483,  668,  483,  483,  483,  483,  483,  483,  483,
 /*    20 */   483,  483,  483,  483,  483,  505,  483,  483,  483,  483,
 /*    30 */   483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
 /*    40 */   483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
 /*    50 */   483,  483,  483,  567,  483,  483,  519,  585,  585,  580,
 /*    60 */   483,  572,  600,  511,  536,  535,  534,  525,  524,  523,
 /*    70 */   483,  483,  483,  586,  483,  547,  538,  537,  533,  532,
 /*    80 */   531,  530,  528,  527,  529,  526,  483,  483,  581,  483,
 /*    90 */   669,  483,  483,  483,  483,  483,  483,  483,  483,  483,
 /*   100 */   660,  483,  659,  483,  589,  483,  584,  606,  483,  584,
 /*   110 */   568,  573,  578,  483,  483,  483,  483,  546,  544,  545,
 /*   120 */   542,  543,  540,  541,  539,  483,  601,  483,  607,  483,
 /*   130 */   499,  483,  483,
};
/********** End of lemon-generated parsing tables *****************************/

/* The next table maps tokens (terminal symbols) into fallback tokens.  
** If a construct like the following:
** 
**      %fallback ID X Y Z.
**
** appears in the grammar, then ID becomes a fallback token for X, Y,
** and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
** but it does not parse, the type of the token is changed to ID and
** the parse is retried before an error is thrown.
**
** This feature can be used, for example, to cause some keywords in a language
** to revert to identifiers if they keyword does not apply in the context where
** it appears.
*/
#ifdef YYFALLBACK
static const YYCODETYPE yyFallback[] = {
};
#endif /* YYFALLBACK */

/* The following structure represents a single element of the
** parser's stack.  Information stored includes:
**
**   +  The state number for the parser at this level of the stack.
**
**   +  The value of the token stored at this level of the stack.
**      (In other words, the "major" token.)
**
**   +  The semantic value stored at this level of the stack.  This is
**      the information used by the action routines in the grammar.
**      It is sometimes called the "minor" token.
**
** After the "shift" half of a SHIFTREDUCE action, the stateno field
** actually contains the reduce action for the second half of the
** SHIFTREDUCE.
*/
struct yyStackEntry {
  YYACTIONTYPE stateno;  /* The state-number, or reduce action in SHIFTREDUCE */
  YYCODETYPE major;      /* The major token value.  This is the code
                         ** number for the token at this stack level */
  YYMINORTYPE minor;     /* The user-supplied minor token value.  This
                         ** is the value of the token  */
};
typedef struct yyStackEntry yyStackEntry;

/* The state of the parser is completely contained in an instance of
** the following structure */
struct yyParser {
  yyStackEntry *yytos;          /* Pointer to top element of the stack */
#ifdef YYTRACKMAXSTACKDEPTH
  int yyhwm;                    /* High-water mark of the stack */
#endif
#ifndef YYNOERRORRECOVERY
  int yyerrcnt;                 /* Shifts left before out of the error */
#endif
  TrlSLParser_ARG_SDECL                /* A place to hold %extra_argument */
  TrlSLParser_CTX_SDECL                /* A place to hold %extra_context */
#if YYSTACKDEPTH<=0
  int yystksz;                  /* Current side of the stack */
  yyStackEntry *yystack;        /* The parser's stack */
  yyStackEntry yystk0;          /* First stack entry */
#else
  yyStackEntry yystack[YYSTACKDEPTH];  /* The parser's stack */
  yyStackEntry *yystackEnd;            /* Last entry in the stack */
#endif
};
typedef struct yyParser yyParser;

#ifndef NDEBUG
#include <stdio.h>
static FILE *yyTraceFILE = 0;
static char *yyTracePrompt = 0;
#endif /* NDEBUG */

#ifndef NDEBUG
/* 
** Turn parser tracing on by giving a stream to which to write the trace
** and a prompt to preface each trace message.  Tracing is turned off
** by making either argument NULL 
**
** Inputs:
** <ul>
** <li> A FILE* to which trace output should be written.
**      If NULL, then tracing is turned off.
** <li> A prefix string written at the beginning of every
**      line of trace output.  If NULL, then tracing is
**      turned off.
** </ul>
**
** Outputs:
** None.
*/
void TrlSLParser_Trace(FILE *TraceFILE, char *zTracePrompt){
  yyTraceFILE = TraceFILE;
  yyTracePrompt = zTracePrompt;
  if( yyTraceFILE==0 ) yyTracePrompt = 0;
  else if( yyTracePrompt==0 ) yyTraceFILE = 0;
}
#endif /* NDEBUG */

#if defined(YYCOVERAGE) || !defined(NDEBUG)
/* For tracing shifts, the names of all terminals and nonterminals
** are required.  The following table supplies these names */
static const char *const yyTokenName[] = { 
  /*    0 */ "$",
  /*    1 */ "IDENTIFIER",
  /*    2 */ "INTCONSTANT",
  /*    3 */ "UINTCONSTANT",
  /*    4 */ "FLOATCONSTANT",
  /*    5 */ "BOOLCONSTANT",
  /*    6 */ "LS",
  /*    7 */ "RS",
  /*    8 */ "LM",
  /*    9 */ "RM",
  /*   10 */ "DOT",
  /*   11 */ "FIELD_SELECTION",
  /*   12 */ "INC_OP",
  /*   13 */ "DEC_OP",
  /*   14 */ "VOID",
  /*   15 */ "COMMA",
  /*   16 */ "PLUS",
  /*   17 */ "DASH",
  /*   18 */ "BANG",
  /*   19 */ "TILDE",
  /*   20 */ "STAR",
  /*   21 */ "SLASH",
  /*   22 */ "PERCENT",
  /*   23 */ "LEFT_OP",
  /*   24 */ "RIGHT_OP",
  /*   25 */ "LEFT_ANGLE",
  /*   26 */ "RIGHT_ANGLE",
  /*   27 */ "LE_OP",
  /*   28 */ "GE_OP",
  /*   29 */ "EQ_OP",
  /*   30 */ "NE_OP",
  /*   31 */ "AMPERSAND",
  /*   32 */ "CARET",
  /*   33 */ "VERTICAL_BAR",
  /*   34 */ "AND_OP",
  /*   35 */ "OR_OP",
  /*   36 */ "QUESTION",
  /*   37 */ "COLON",
  /*   38 */ "EQUAL",
  /*   39 */ "MUL_ASSIGN",
  /*   40 */ "DIV_ASSIGN",
  /*   41 */ "MOD_ASSIGN",
  /*   42 */ "ADD_ASSIGN",
  /*   43 */ "SUB_ASSIGN",
  /*   44 */ "LEFT_ASSIGN",
  /*   45 */ "RIGHT_ASSIGN",
  /*   46 */ "AND_ASSIGN",
  /*   47 */ "XOR_ASSIGN",
  /*   48 */ "OR_ASSIGN",
  /*   49 */ "SEMICOLON",
  /*   50 */ "CONST",
  /*   51 */ "IN",
  /*   52 */ "OUT",
  /*   53 */ "INOUT",
  /*   54 */ "UNIFORM",
  /*   55 */ "STRUCT",
  /*   56 */ "FLOAT",
  /*   57 */ "INT",
  /*   58 */ "UINT",
  /*   59 */ "BOOL",
  /*   60 */ "VEC2",
  /*   61 */ "VEC3",
  /*   62 */ "VEC4",
  /*   63 */ "BVEC2",
  /*   64 */ "BVEC3",
  /*   65 */ "BVEC4",
  /*   66 */ "IVEC2",
  /*   67 */ "IVEC3",
  /*   68 */ "IVEC4",
  /*   69 */ "UVEC2",
  /*   70 */ "UVEC3",
  /*   71 */ "UVEC4",
  /*   72 */ "MAT2",
  /*   73 */ "MAT3",
  /*   74 */ "MAT4",
  /*   75 */ "MAT2X2",
  /*   76 */ "MAT2X3",
  /*   77 */ "MAT2X4",
  /*   78 */ "MAT3X2",
  /*   79 */ "MAT3X3",
  /*   80 */ "MAT3X4",
  /*   81 */ "MAT4X2",
  /*   82 */ "MAT4X3",
  /*   83 */ "MAT4X4",
  /*   84 */ "SAMPLER2D",
  /*   85 */ "SAMPLER3D",
  /*   86 */ "SAMPLERCUBE",
  /*   87 */ "HIGH_PRECISION",
  /*   88 */ "MEDIUM_PRECISION",
  /*   89 */ "LOW_PRECISION",
  /*   90 */ "LB",
  /*   91 */ "RB",
  /*   92 */ "IF",
  /*   93 */ "ELSE",
  /*   94 */ "WHILE",
  /*   95 */ "FOR",
  /*   96 */ "CONTINUE",
  /*   97 */ "BREAK",
  /*   98 */ "RETURN",
  /*   99 */ "DISCARD",
  /*  100 */ "variable_identifier",
  /*  101 */ "primary_expression",
  /*  102 */ "expression",
  /*  103 */ "postfix_expression",
  /*  104 */ "integer_expression",
  /*  105 */ "function_call",
  /*  106 */ "function_call_or_method",
  /*  107 */ "function_call_generic",
  /*  108 */ "function_call_header_with_parameters",
  /*  109 */ "function_call_header_no_parameters",
  /*  110 */ "function_call_header",
  /*  111 */ "assignment_expression",
  /*  112 */ "function_identifier",
  /*  113 */ "type_specifier",
  /*  114 */ "unary_expression",
  /*  115 */ "unary_operator",
  /*  116 */ "multiplicative_expression",
  /*  117 */ "additive_expression",
  /*  118 */ "shift_expression",
  /*  119 */ "relational_expression",
  /*  120 */ "equality_expression",
  /*  121 */ "and_expression",
  /*  122 */ "exclusive_or_expression",
  /*  123 */ "inclusive_or_expression",
  /*  124 */ "logical_and_expression",
  /*  125 */ "logical_or_expression",
  /*  126 */ "conditional_expression",
  /*  127 */ "assignment_operator",
  /*  128 */ "constant_expression",
  /*  129 */ "declaration",
  /*  130 */ "init_declarator_list",
  /*  131 */ "function_prototype",
  /*  132 */ "function_declarator",
  /*  133 */ "function_header",
  /*  134 */ "function_header_with_parameters",
  /*  135 */ "parameter_declaration",
  /*  136 */ "fully_specified_type",
  /*  137 */ "parameter_declarator",
  /*  138 */ "array_specifier",
  /*  139 */ "type_qualifier",
  /*  140 */ "parameter_type_specifier",
  /*  141 */ "single_declaration",
  /*  142 */ "initializer",
  /*  143 */ "single_type_qualifier",
  /*  144 */ "storage_qualifier",
  /*  145 */ "precision_qualifier",
  /*  146 */ "type_specifier_nonarray",
  /*  147 */ "declaration_statement",
  /*  148 */ "statement",
  /*  149 */ "compound_statement",
  /*  150 */ "simple_statement",
  /*  151 */ "expression_statement",
  /*  152 */ "selection_statement",
  /*  153 */ "iteration_statement",
  /*  154 */ "jump_statement",
  /*  155 */ "statement_list",
  /*  156 */ "selection_rest_statement",
  /*  157 */ "condition",
  /*  158 */ "for_init_statement",
  /*  159 */ "for_rest_statement",
  /*  160 */ "condition_opt",
  /*  161 */ "translation_unit",
  /*  162 */ "external_declaration_list",
  /*  163 */ "external_declaration",
  /*  164 */ "function_definition",
  /*  165 */ "struct_definition",
  /*  166 */ "declaration_list",
};
#endif /* defined(YYCOVERAGE) || !defined(NDEBUG) */

#ifndef NDEBUG
/* For tracing reduce actions, the names of all rules are required.
*/
static const char *const yyRuleName[] = {
 /*   0 */ "variable_identifier ::= IDENTIFIER",
 /*   1 */ "primary_expression ::= variable_identifier",
 /*   2 */ "primary_expression ::= INTCONSTANT",
 /*   3 */ "primary_expression ::= UINTCONSTANT",
 /*   4 */ "primary_expression ::= FLOATCONSTANT",
 /*   5 */ "primary_expression ::= BOOLCONSTANT",
 /*   6 */ "primary_expression ::= LS expression RS",
 /*   7 */ "postfix_expression ::= primary_expression",
 /*   8 */ "postfix_expression ::= postfix_expression LM integer_expression RM",
 /*   9 */ "postfix_expression ::= function_call",
 /*  10 */ "postfix_expression ::= postfix_expression DOT FIELD_SELECTION",
 /*  11 */ "postfix_expression ::= postfix_expression INC_OP",
 /*  12 */ "postfix_expression ::= postfix_expression DEC_OP",
 /*  13 */ "integer_expression ::= expression",
 /*  14 */ "function_call ::= function_call_or_method",
 /*  15 */ "function_call_or_method ::= function_call_generic",
 /*  16 */ "function_call_generic ::= function_call_header_with_parameters RS",
 /*  17 */ "function_call_generic ::= function_call_header_no_parameters RS",
 /*  18 */ "function_call_header_no_parameters ::= function_call_header VOID",
 /*  19 */ "function_call_header_no_parameters ::= function_call_header",
 /*  20 */ "function_call_header_with_parameters ::= function_call_header assignment_expression",
 /*  21 */ "function_call_header_with_parameters ::= function_call_header_with_parameters COMMA assignment_expression",
 /*  22 */ "function_call_header ::= function_identifier LS",
 /*  23 */ "function_identifier ::= type_specifier",
 /*  24 */ "function_identifier ::= postfix_expression",
 /*  25 */ "unary_expression ::= postfix_expression",
 /*  26 */ "unary_expression ::= INC_OP unary_expression",
 /*  27 */ "unary_expression ::= DEC_OP unary_expression",
 /*  28 */ "unary_expression ::= unary_operator unary_expression",
 /*  29 */ "unary_operator ::= PLUS",
 /*  30 */ "unary_operator ::= DASH",
 /*  31 */ "unary_operator ::= BANG",
 /*  32 */ "unary_operator ::= TILDE",
 /*  33 */ "multiplicative_expression ::= unary_expression",
 /*  34 */ "multiplicative_expression ::= multiplicative_expression STAR unary_expression",
 /*  35 */ "multiplicative_expression ::= multiplicative_expression SLASH unary_expression",
 /*  36 */ "multiplicative_expression ::= multiplicative_expression PERCENT unary_expression",
 /*  37 */ "additive_expression ::= multiplicative_expression",
 /*  38 */ "additive_expression ::= additive_expression PLUS multiplicative_expression",
 /*  39 */ "additive_expression ::= additive_expression DASH multiplicative_expression",
 /*  40 */ "shift_expression ::= additive_expression",
 /*  41 */ "shift_expression ::= shift_expression LEFT_OP additive_expression",
 /*  42 */ "shift_expression ::= shift_expression RIGHT_OP additive_expression",
 /*  43 */ "relational_expression ::= shift_expression",
 /*  44 */ "relational_expression ::= relational_expression LEFT_ANGLE shift_expression",
 /*  45 */ "relational_expression ::= relational_expression RIGHT_ANGLE shift_expression",
 /*  46 */ "relational_expression ::= relational_expression LE_OP shift_expression",
 /*  47 */ "relational_expression ::= relational_expression GE_OP shift_expression",
 /*  48 */ "equality_expression ::= relational_expression",
 /*  49 */ "equality_expression ::= equality_expression EQ_OP relational_expression",
 /*  50 */ "equality_expression ::= equality_expression NE_OP relational_expression",
 /*  51 */ "and_expression ::= equality_expression",
 /*  52 */ "and_expression ::= and_expression AMPERSAND equality_expression",
 /*  53 */ "exclusive_or_expression ::= and_expression",
 /*  54 */ "exclusive_or_expression ::= exclusive_or_expression CARET and_expression",
 /*  55 */ "inclusive_or_expression ::= exclusive_or_expression",
 /*  56 */ "inclusive_or_expression ::= inclusive_or_expression VERTICAL_BAR exclusive_or_expression",
 /*  57 */ "logical_and_expression ::= inclusive_or_expression",
 /*  58 */ "logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression",
 /*  59 */ "logical_or_expression ::= logical_and_expression",
 /*  60 */ "logical_or_expression ::= logical_or_expression OR_OP logical_and_expression",
 /*  61 */ "conditional_expression ::= logical_or_expression",
 /*  62 */ "conditional_expression ::= logical_or_expression QUESTION expression COLON assignment_expression",
 /*  63 */ "assignment_expression ::= conditional_expression",
 /*  64 */ "assignment_expression ::= unary_expression assignment_operator assignment_expression",
 /*  65 */ "assignment_operator ::= EQUAL",
 /*  66 */ "assignment_operator ::= MUL_ASSIGN",
 /*  67 */ "assignment_operator ::= DIV_ASSIGN",
 /*  68 */ "assignment_operator ::= MOD_ASSIGN",
 /*  69 */ "assignment_operator ::= ADD_ASSIGN",
 /*  70 */ "assignment_operator ::= SUB_ASSIGN",
 /*  71 */ "assignment_operator ::= LEFT_ASSIGN",
 /*  72 */ "assignment_operator ::= RIGHT_ASSIGN",
 /*  73 */ "assignment_operator ::= AND_ASSIGN",
 /*  74 */ "assignment_operator ::= XOR_ASSIGN",
 /*  75 */ "assignment_operator ::= OR_ASSIGN",
 /*  76 */ "expression ::= assignment_expression",
 /*  77 */ "expression ::= expression COMMA assignment_expression",
 /*  78 */ "constant_expression ::= conditional_expression",
 /*  79 */ "declaration ::= init_declarator_list SEMICOLON",
 /*  80 */ "function_prototype ::= function_declarator RS",
 /*  81 */ "function_declarator ::= function_header",
 /*  82 */ "function_declarator ::= function_header_with_parameters",
 /*  83 */ "function_header_with_parameters ::= function_header parameter_declaration",
 /*  84 */ "function_header_with_parameters ::= function_header_with_parameters COMMA parameter_declaration",
 /*  85 */ "function_header ::= fully_specified_type IDENTIFIER LS",
 /*  86 */ "parameter_declarator ::= type_specifier IDENTIFIER",
 /*  87 */ "parameter_declarator ::= type_specifier IDENTIFIER array_specifier",
 /*  88 */ "parameter_declaration ::= type_qualifier parameter_declarator",
 /*  89 */ "parameter_declaration ::= parameter_declarator",
 /*  90 */ "parameter_declaration ::= type_qualifier parameter_type_specifier",
 /*  91 */ "parameter_declaration ::= parameter_type_specifier",
 /*  92 */ "parameter_type_specifier ::= type_specifier",
 /*  93 */ "init_declarator_list ::= single_declaration",
 /*  94 */ "init_declarator_list ::= init_declarator_list COMMA IDENTIFIER",
 /*  95 */ "init_declarator_list ::= init_declarator_list COMMA IDENTIFIER array_specifier",
 /*  96 */ "init_declarator_list ::= init_declarator_list COMMA IDENTIFIER array_specifier EQUAL initializer",
 /*  97 */ "init_declarator_list ::= init_declarator_list COMMA IDENTIFIER EQUAL initializer",
 /*  98 */ "single_declaration ::= fully_specified_type",
 /*  99 */ "single_declaration ::= fully_specified_type IDENTIFIER",
 /* 100 */ "single_declaration ::= fully_specified_type IDENTIFIER array_specifier",
 /* 101 */ "single_declaration ::= fully_specified_type IDENTIFIER array_specifier EQUAL initializer",
 /* 102 */ "single_declaration ::= fully_specified_type IDENTIFIER EQUAL initializer",
 /* 103 */ "fully_specified_type ::= type_specifier",
 /* 104 */ "fully_specified_type ::= type_qualifier type_specifier",
 /* 105 */ "type_qualifier ::= single_type_qualifier",
 /* 106 */ "type_qualifier ::= type_qualifier single_type_qualifier",
 /* 107 */ "single_type_qualifier ::= storage_qualifier",
 /* 108 */ "single_type_qualifier ::= precision_qualifier",
 /* 109 */ "storage_qualifier ::= CONST",
 /* 110 */ "storage_qualifier ::= IN",
 /* 111 */ "storage_qualifier ::= OUT",
 /* 112 */ "storage_qualifier ::= INOUT",
 /* 113 */ "storage_qualifier ::= UNIFORM",
 /* 114 */ "type_specifier ::= type_specifier_nonarray",
 /* 115 */ "type_specifier ::= type_specifier_nonarray array_specifier",
 /* 116 */ "array_specifier ::= LM RM",
 /* 117 */ "array_specifier ::= LM constant_expression RM",
 /* 118 */ "array_specifier ::= array_specifier LM RM",
 /* 119 */ "array_specifier ::= array_specifier LM constant_expression RM",
 /* 120 */ "type_specifier_nonarray ::= STRUCT IDENTIFIER",
 /* 121 */ "type_specifier_nonarray ::= VOID",
 /* 122 */ "type_specifier_nonarray ::= FLOAT",
 /* 123 */ "type_specifier_nonarray ::= INT",
 /* 124 */ "type_specifier_nonarray ::= UINT",
 /* 125 */ "type_specifier_nonarray ::= BOOL",
 /* 126 */ "type_specifier_nonarray ::= VEC2",
 /* 127 */ "type_specifier_nonarray ::= VEC3",
 /* 128 */ "type_specifier_nonarray ::= VEC4",
 /* 129 */ "type_specifier_nonarray ::= BVEC2",
 /* 130 */ "type_specifier_nonarray ::= BVEC3",
 /* 131 */ "type_specifier_nonarray ::= BVEC4",
 /* 132 */ "type_specifier_nonarray ::= IVEC2",
 /* 133 */ "type_specifier_nonarray ::= IVEC3",
 /* 134 */ "type_specifier_nonarray ::= IVEC4",
 /* 135 */ "type_specifier_nonarray ::= UVEC2",
 /* 136 */ "type_specifier_nonarray ::= UVEC3",
 /* 137 */ "type_specifier_nonarray ::= UVEC4",
 /* 138 */ "type_specifier_nonarray ::= MAT2",
 /* 139 */ "type_specifier_nonarray ::= MAT3",
 /* 140 */ "type_specifier_nonarray ::= MAT4",
 /* 141 */ "type_specifier_nonarray ::= MAT2X2",
 /* 142 */ "type_specifier_nonarray ::= MAT2X3",
 /* 143 */ "type_specifier_nonarray ::= MAT2X4",
 /* 144 */ "type_specifier_nonarray ::= MAT3X2",
 /* 145 */ "type_specifier_nonarray ::= MAT3X3",
 /* 146 */ "type_specifier_nonarray ::= MAT3X4",
 /* 147 */ "type_specifier_nonarray ::= MAT4X2",
 /* 148 */ "type_specifier_nonarray ::= MAT4X3",
 /* 149 */ "type_specifier_nonarray ::= MAT4X4",
 /* 150 */ "type_specifier_nonarray ::= SAMPLER2D",
 /* 151 */ "type_specifier_nonarray ::= SAMPLER3D",
 /* 152 */ "type_specifier_nonarray ::= SAMPLERCUBE",
 /* 153 */ "precision_qualifier ::= HIGH_PRECISION",
 /* 154 */ "precision_qualifier ::= MEDIUM_PRECISION",
 /* 155 */ "precision_qualifier ::= LOW_PRECISION",
 /* 156 */ "initializer ::= assignment_expression",
 /* 157 */ "declaration_statement ::= declaration",
 /* 158 */ "statement ::= compound_statement",
 /* 159 */ "statement ::= simple_statement",
 /* 160 */ "simple_statement ::= declaration_statement",
 /* 161 */ "simple_statement ::= expression_statement",
 /* 162 */ "simple_statement ::= selection_statement",
 /* 163 */ "simple_statement ::= iteration_statement",
 /* 164 */ "simple_statement ::= jump_statement",
 /* 165 */ "compound_statement ::= LB RB",
 /* 166 */ "compound_statement ::= LB statement_list RB",
 /* 167 */ "statement_list ::= statement",
 /* 168 */ "statement_list ::= statement_list statement",
 /* 169 */ "expression_statement ::= SEMICOLON",
 /* 170 */ "expression_statement ::= expression SEMICOLON",
 /* 171 */ "selection_statement ::= IF LS expression RS selection_rest_statement",
 /* 172 */ "selection_rest_statement ::= statement ELSE statement",
 /* 173 */ "selection_rest_statement ::= statement",
 /* 174 */ "condition ::= expression",
 /* 175 */ "condition ::= fully_specified_type IDENTIFIER EQUAL initializer",
 /* 176 */ "iteration_statement ::= WHILE LS condition RS statement",
 /* 177 */ "iteration_statement ::= FOR LS for_init_statement for_rest_statement RS statement",
 /* 178 */ "for_init_statement ::= expression_statement",
 /* 179 */ "for_init_statement ::= declaration_statement",
 /* 180 */ "condition_opt ::= condition",
 /* 181 */ "condition_opt ::=",
 /* 182 */ "for_rest_statement ::= condition_opt SEMICOLON",
 /* 183 */ "for_rest_statement ::= condition_opt SEMICOLON expression",
 /* 184 */ "jump_statement ::= CONTINUE SEMICOLON",
 /* 185 */ "jump_statement ::= BREAK SEMICOLON",
 /* 186 */ "jump_statement ::= RETURN SEMICOLON",
 /* 187 */ "jump_statement ::= RETURN expression SEMICOLON",
 /* 188 */ "jump_statement ::= DISCARD SEMICOLON",
 /* 189 */ "translation_unit ::= external_declaration_list",
 /* 190 */ "external_declaration_list ::= external_declaration",
 /* 191 */ "external_declaration_list ::= external_declaration_list external_declaration",
 /* 192 */ "external_declaration ::= function_definition",
 /* 193 */ "external_declaration ::= declaration",
 /* 194 */ "external_declaration ::= struct_definition",
 /* 195 */ "function_definition ::= function_prototype compound_statement",
 /* 196 */ "declaration_list ::= declaration",
 /* 197 */ "declaration_list ::= declaration_list declaration",
 /* 198 */ "struct_definition ::= STRUCT IDENTIFIER LB declaration_list RB SEMICOLON",
};
#endif /* NDEBUG */


#if YYSTACKDEPTH<=0
/*
** Try to increase the size of the parser stack.  Return the number
** of errors.  Return 0 on success.
*/
static int yyGrowStack(yyParser *p){
  int newSize;
  int idx;
  yyStackEntry *pNew;

  newSize = p->yystksz*2 + 100;
  idx = p->yytos ? (int)(p->yytos - p->yystack) : 0;
  if( p->yystack==&p->yystk0 ){
    pNew = malloc(newSize*sizeof(pNew[0]));
    if( pNew ) pNew[0] = p->yystk0;
  }else{
    pNew = realloc(p->yystack, newSize*sizeof(pNew[0]));
  }
  if( pNew ){
    p->yystack = pNew;
    p->yytos = &p->yystack[idx];
#ifndef NDEBUG
    if( yyTraceFILE ){
      fprintf(yyTraceFILE,"%sStack grows from %d to %d entries.\n",
              yyTracePrompt, p->yystksz, newSize);
    }
#endif
    p->yystksz = newSize;
  }
  return pNew==0; 
}
#endif

/* Datatype of the argument to the memory allocated passed as the
** second argument to TrlSLParser_Alloc() below.  This can be changed by
** putting an appropriate #define in the %include section of the input
** grammar.
*/
#ifndef YYMALLOCARGTYPE
# define YYMALLOCARGTYPE size_t
#endif

/* Initialize a new parser that has already been allocated.
*/
void TrlSLParser_Init(void *yypRawParser TrlSLParser_CTX_PDECL){
  yyParser *yypParser = (yyParser*)yypRawParser;
  TrlSLParser_CTX_STORE
#ifdef YYTRACKMAXSTACKDEPTH
  yypParser->yyhwm = 0;
#endif
#if YYSTACKDEPTH<=0
  yypParser->yytos = NULL;
  yypParser->yystack = NULL;
  yypParser->yystksz = 0;
  if( yyGrowStack(yypParser) ){
    yypParser->yystack = &yypParser->yystk0;
    yypParser->yystksz = 1;
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  yypParser->yytos = yypParser->yystack;
  yypParser->yystack[0].stateno = 0;
  yypParser->yystack[0].major = 0;
#if YYSTACKDEPTH>0
  yypParser->yystackEnd = &yypParser->yystack[YYSTACKDEPTH-1];
#endif
}

#ifndef TrlSLParser__ENGINEALWAYSONSTACK
/* 
** This function allocates a new parser.
** The only argument is a pointer to a function which works like
** malloc.
**
** Inputs:
** A pointer to the function used to allocate memory.
**
** Outputs:
** A pointer to a parser.  This pointer is used in subsequent calls
** to TrlSLParser_ and TrlSLParser_Free.
*/
void *TrlSLParser_Alloc(void *(*mallocProc)(YYMALLOCARGTYPE) TrlSLParser_CTX_PDECL){
  yyParser *yypParser;
  yypParser = (yyParser*)(*mallocProc)( (YYMALLOCARGTYPE)sizeof(yyParser) );
  if( yypParser ){
    TrlSLParser_CTX_STORE
    TrlSLParser_Init(yypParser TrlSLParser_CTX_PARAM);
  }
  return (void*)yypParser;
}
#endif /* TrlSLParser__ENGINEALWAYSONSTACK */


/* The following function deletes the "minor type" or semantic value
** associated with a symbol.  The symbol can be either a terminal
** or nonterminal. "yymajor" is the symbol code, and "yypminor" is
** a pointer to the value to be deleted.  The code used to do the 
** deletions is derived from the %destructor and/or %token_destructor
** directives of the input grammar.
*/
static void yy_destructor(
  yyParser *yypParser,    /* The parser */
  YYCODETYPE yymajor,     /* Type code for object to destroy */
  YYMINORTYPE *yypminor   /* The object to be destroyed */
){
  TrlSLParser_ARG_FETCH
  TrlSLParser_CTX_FETCH
  switch( yymajor ){
    /* Here is inserted the actions which take place when a
    ** terminal or non-terminal is destroyed.  This can happen
    ** when the symbol is popped from the stack during a
    ** reduce or during error processing or when a parser is 
    ** being destroyed before it is finished parsing.
    **
    ** Note: during a reduce, the only symbols destroyed are those
    ** which appear on the RHS of the rule, but which are *not* used
    ** inside the C code.
    */
/********* Begin destructor definitions ***************************************/
/********* End destructor definitions *****************************************/
    default:  break;   /* If no destructor action specified: do nothing */
  }
}

/*
** Pop the parser's stack once.
**
** If there is a destructor routine associated with the token which
** is popped from the stack, then call it.
*/
static void yy_pop_parser_stack(yyParser *pParser){
  yyStackEntry *yytos;
  assert( pParser->yytos!=0 );
  assert( pParser->yytos > pParser->yystack );
  yytos = pParser->yytos--;
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sPopping %s\n",
      yyTracePrompt,
      yyTokenName[yytos->major]);
  }
#endif
  yy_destructor(pParser, yytos->major, &yytos->minor);
}

/*
** Clear all secondary memory allocations from the parser
*/
void TrlSLParser_Finalize(void *p){
  yyParser *pParser = (yyParser*)p;
  while( pParser->yytos>pParser->yystack ) yy_pop_parser_stack(pParser);
#if YYSTACKDEPTH<=0
  if( pParser->yystack!=&pParser->yystk0 ) free(pParser->yystack);
#endif
}

#ifndef TrlSLParser__ENGINEALWAYSONSTACK
/* 
** Deallocate and destroy a parser.  Destructors are called for
** all stack elements before shutting the parser down.
**
** If the YYPARSEFREENEVERNULL macro exists (for example because it
** is defined in a %include section of the input grammar) then it is
** assumed that the input pointer is never NULL.
*/
void TrlSLParser_Free(
  void *p,                    /* The parser to be deleted */
  void (*freeProc)(void*)     /* Function used to reclaim memory */
){
#ifndef YYPARSEFREENEVERNULL
  if( p==0 ) return;
#endif
  TrlSLParser_Finalize(p);
  (*freeProc)(p);
}
#endif /* TrlSLParser__ENGINEALWAYSONSTACK */

/*
** Return the peak depth of the stack for a parser.
*/
#ifdef YYTRACKMAXSTACKDEPTH
int TrlSLParser_StackPeak(void *p){
  yyParser *pParser = (yyParser*)p;
  return pParser->yyhwm;
}
#endif

/* This array of booleans keeps track of the parser statement
** coverage.  The element yycoverage[X][Y] is set when the parser
** is in state X and has a lookahead token Y.  In a well-tested
** systems, every element of this matrix should end up being set.
*/
#if defined(YYCOVERAGE)
static unsigned char yycoverage[YYNSTATE][YYNTOKEN];
#endif

/*
** Write into out a description of every state/lookahead combination that
**
**   (1)  has not been used by the parser, and
**   (2)  is not a syntax error.
**
** Return the number of missed state/lookahead combinations.
*/
#if defined(YYCOVERAGE)
int TrlSLParser_Coverage(FILE *out){
  int stateno, iLookAhead, i;
  int nMissed = 0;
  for(stateno=0; stateno<YYNSTATE; stateno++){
    i = yy_shift_ofst[stateno];
    for(iLookAhead=0; iLookAhead<YYNTOKEN; iLookAhead++){
      if( yy_lookahead[i+iLookAhead]!=iLookAhead ) continue;
      if( yycoverage[stateno][iLookAhead]==0 ) nMissed++;
      if( out ){
        fprintf(out,"State %d lookahead %s %s\n", stateno,
                yyTokenName[iLookAhead],
                yycoverage[stateno][iLookAhead] ? "ok" : "missed");
      }
    }
  }
  return nMissed;
}
#endif

/*
** Find the appropriate action for a parser given the terminal
** look-ahead token iLookAhead.
*/
static YYACTIONTYPE yy_find_shift_action(
  YYCODETYPE iLookAhead,    /* The look-ahead token */
  YYACTIONTYPE stateno      /* Current state number */
){
  int i;

  if( stateno>YY_MAX_SHIFT ) return stateno;
  assert( stateno <= YY_SHIFT_COUNT );
#if defined(YYCOVERAGE)
  yycoverage[stateno][iLookAhead] = 1;
#endif
  do{
    i = yy_shift_ofst[stateno];
    assert( i>=0 );
    assert( i+YYNTOKEN<=(int)sizeof(yy_lookahead)/sizeof(yy_lookahead[0]) );
    assert( iLookAhead!=YYNOCODE );
    assert( iLookAhead < YYNTOKEN );
    i += iLookAhead;
    if( yy_lookahead[i]!=iLookAhead ){
#ifdef YYFALLBACK
      YYCODETYPE iFallback;            /* Fallback token */
      if( iLookAhead<sizeof(yyFallback)/sizeof(yyFallback[0])
             && (iFallback = yyFallback[iLookAhead])!=0 ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE, "%sFALLBACK %s => %s\n",
             yyTracePrompt, yyTokenName[iLookAhead], yyTokenName[iFallback]);
        }
#endif
        assert( yyFallback[iFallback]==0 ); /* Fallback loop must terminate */
        iLookAhead = iFallback;
        continue;
      }
#endif
#ifdef YYWILDCARD
      {
        int j = i - iLookAhead + YYWILDCARD;
        if( 
#if YY_SHIFT_MIN+YYWILDCARD<0
          j>=0 &&
#endif
#if YY_SHIFT_MAX+YYWILDCARD>=YY_ACTTAB_COUNT
          j<YY_ACTTAB_COUNT &&
#endif
          yy_lookahead[j]==YYWILDCARD && iLookAhead>0
        ){
#ifndef NDEBUG
          if( yyTraceFILE ){
            fprintf(yyTraceFILE, "%sWILDCARD %s => %s\n",
               yyTracePrompt, yyTokenName[iLookAhead],
               yyTokenName[YYWILDCARD]);
          }
#endif /* NDEBUG */
          return yy_action[j];
        }
      }
#endif /* YYWILDCARD */
      return yy_default[stateno];
    }else{
      return yy_action[i];
    }
  }while(1);
}

/*
** Find the appropriate action for a parser given the non-terminal
** look-ahead token iLookAhead.
*/
static int yy_find_reduce_action(
  YYACTIONTYPE stateno,     /* Current state number */
  YYCODETYPE iLookAhead     /* The look-ahead token */
){
  int i;
#ifdef YYERRORSYMBOL
  if( stateno>YY_REDUCE_COUNT ){
    return yy_default[stateno];
  }
#else
  assert( stateno<=YY_REDUCE_COUNT );
#endif
  i = yy_reduce_ofst[stateno];
  assert( iLookAhead!=YYNOCODE );
  i += iLookAhead;
#ifdef YYERRORSYMBOL
  if( i<0 || i>=YY_ACTTAB_COUNT || yy_lookahead[i]!=iLookAhead ){
    return yy_default[stateno];
  }
#else
  assert( i>=0 && i<YY_ACTTAB_COUNT );
  assert( yy_lookahead[i]==iLookAhead );
#endif
  return yy_action[i];
}

/*
** The following routine is called if the stack overflows.
*/
static void yyStackOverflow(yyParser *yypParser){
   TrlSLParser_ARG_FETCH
   TrlSLParser_CTX_FETCH
#ifndef NDEBUG
   if( yyTraceFILE ){
     fprintf(yyTraceFILE,"%sStack Overflow!\n",yyTracePrompt);
   }
#endif
   while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
   /* Here code is inserted which will execute if the parser
   ** stack every overflows */
/******** Begin %stack_overflow code ******************************************/

    ruleHandler->StackOverflow();
/******** End %stack_overflow code ********************************************/
   TrlSLParser_ARG_STORE /* Suppress warning about unused %extra_argument var */
   TrlSLParser_CTX_STORE
}

/*
** Print tracing information for a SHIFT action
*/
#ifndef NDEBUG
static void yyTraceShift(yyParser *yypParser, int yyNewState, const char *zTag){
  if( yyTraceFILE ){
    if( yyNewState<YYNSTATE ){
      fprintf(yyTraceFILE,"%s%s '%s', go to state %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState);
    }else{
      fprintf(yyTraceFILE,"%s%s '%s', pending reduce %d\n",
         yyTracePrompt, zTag, yyTokenName[yypParser->yytos->major],
         yyNewState - YY_MIN_REDUCE);
    }
  }
}
#else
# define yyTraceShift(X,Y,Z)
#endif

/*
** Perform a shift action.
*/
static void yy_shift(
  yyParser *yypParser,          /* The parser to be shifted */
  YYACTIONTYPE yyNewState,      /* The new state to shift in */
  YYCODETYPE yyMajor,           /* The major token to shift in */
  TrlSLParser_TOKENTYPE yyMinor        /* The minor token to shift in */
){
  yyStackEntry *yytos;
  yypParser->yytos++;
#ifdef YYTRACKMAXSTACKDEPTH
  if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
    yypParser->yyhwm++;
    assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack) );
  }
#endif
#if YYSTACKDEPTH>0 
  if( yypParser->yytos>yypParser->yystackEnd ){
    yypParser->yytos--;
    yyStackOverflow(yypParser);
    return;
  }
#else
  if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz] ){
    if( yyGrowStack(yypParser) ){
      yypParser->yytos--;
      yyStackOverflow(yypParser);
      return;
    }
  }
#endif
  if( yyNewState > YY_MAX_SHIFT ){
    yyNewState += YY_MIN_REDUCE - YY_MIN_SHIFTREDUCE;
  }
  yytos = yypParser->yytos;
  yytos->stateno = yyNewState;
  yytos->major = yyMajor;
  yytos->minor.yy0 = yyMinor;
  yyTraceShift(yypParser, yyNewState, "Shift");
}

/* The following table contains information about every rule that
** is used during the reduce.
*/
static const struct {
  YYCODETYPE lhs;       /* Symbol on the left-hand side of the rule */
  signed char nrhs;     /* Negative of the number of RHS symbols in the rule */
} yyRuleInfo[] = {
  {  100,   -1 }, /* (0) variable_identifier ::= IDENTIFIER */
  {  101,   -1 }, /* (1) primary_expression ::= variable_identifier */
  {  101,   -1 }, /* (2) primary_expression ::= INTCONSTANT */
  {  101,   -1 }, /* (3) primary_expression ::= UINTCONSTANT */
  {  101,   -1 }, /* (4) primary_expression ::= FLOATCONSTANT */
  {  101,   -1 }, /* (5) primary_expression ::= BOOLCONSTANT */
  {  101,   -3 }, /* (6) primary_expression ::= LS expression RS */
  {  103,   -1 }, /* (7) postfix_expression ::= primary_expression */
  {  103,   -4 }, /* (8) postfix_expression ::= postfix_expression LM integer_expression RM */
  {  103,   -1 }, /* (9) postfix_expression ::= function_call */
  {  103,   -3 }, /* (10) postfix_expression ::= postfix_expression DOT FIELD_SELECTION */
  {  103,   -2 }, /* (11) postfix_expression ::= postfix_expression INC_OP */
  {  103,   -2 }, /* (12) postfix_expression ::= postfix_expression DEC_OP */
  {  104,   -1 }, /* (13) integer_expression ::= expression */
  {  105,   -1 }, /* (14) function_call ::= function_call_or_method */
  {  106,   -1 }, /* (15) function_call_or_method ::= function_call_generic */
  {  107,   -2 }, /* (16) function_call_generic ::= function_call_header_with_parameters RS */
  {  107,   -2 }, /* (17) function_call_generic ::= function_call_header_no_parameters RS */
  {  109,   -2 }, /* (18) function_call_header_no_parameters ::= function_call_header VOID */
  {  109,   -1 }, /* (19) function_call_header_no_parameters ::= function_call_header */
  {  108,   -2 }, /* (20) function_call_header_with_parameters ::= function_call_header assignment_expression */
  {  108,   -3 }, /* (21) function_call_header_with_parameters ::= function_call_header_with_parameters COMMA assignment_expression */
  {  110,   -2 }, /* (22) function_call_header ::= function_identifier LS */
  {  112,   -1 }, /* (23) function_identifier ::= type_specifier */
  {  112,   -1 }, /* (24) function_identifier ::= postfix_expression */
  {  114,   -1 }, /* (25) unary_expression ::= postfix_expression */
  {  114,   -2 }, /* (26) unary_expression ::= INC_OP unary_expression */
  {  114,   -2 }, /* (27) unary_expression ::= DEC_OP unary_expression */
  {  114,   -2 }, /* (28) unary_expression ::= unary_operator unary_expression */
  {  115,   -1 }, /* (29) unary_operator ::= PLUS */
  {  115,   -1 }, /* (30) unary_operator ::= DASH */
  {  115,   -1 }, /* (31) unary_operator ::= BANG */
  {  115,   -1 }, /* (32) unary_operator ::= TILDE */
  {  116,   -1 }, /* (33) multiplicative_expression ::= unary_expression */
  {  116,   -3 }, /* (34) multiplicative_expression ::= multiplicative_expression STAR unary_expression */
  {  116,   -3 }, /* (35) multiplicative_expression ::= multiplicative_expression SLASH unary_expression */
  {  116,   -3 }, /* (36) multiplicative_expression ::= multiplicative_expression PERCENT unary_expression */
  {  117,   -1 }, /* (37) additive_expression ::= multiplicative_expression */
  {  117,   -3 }, /* (38) additive_expression ::= additive_expression PLUS multiplicative_expression */
  {  117,   -3 }, /* (39) additive_expression ::= additive_expression DASH multiplicative_expression */
  {  118,   -1 }, /* (40) shift_expression ::= additive_expression */
  {  118,   -3 }, /* (41) shift_expression ::= shift_expression LEFT_OP additive_expression */
  {  118,   -3 }, /* (42) shift_expression ::= shift_expression RIGHT_OP additive_expression */
  {  119,   -1 }, /* (43) relational_expression ::= shift_expression */
  {  119,   -3 }, /* (44) relational_expression ::= relational_expression LEFT_ANGLE shift_expression */
  {  119,   -3 }, /* (45) relational_expression ::= relational_expression RIGHT_ANGLE shift_expression */
  {  119,   -3 }, /* (46) relational_expression ::= relational_expression LE_OP shift_expression */
  {  119,   -3 }, /* (47) relational_expression ::= relational_expression GE_OP shift_expression */
  {  120,   -1 }, /* (48) equality_expression ::= relational_expression */
  {  120,   -3 }, /* (49) equality_expression ::= equality_expression EQ_OP relational_expression */
  {  120,   -3 }, /* (50) equality_expression ::= equality_expression NE_OP relational_expression */
  {  121,   -1 }, /* (51) and_expression ::= equality_expression */
  {  121,   -3 }, /* (52) and_expression ::= and_expression AMPERSAND equality_expression */
  {  122,   -1 }, /* (53) exclusive_or_expression ::= and_expression */
  {  122,   -3 }, /* (54) exclusive_or_expression ::= exclusive_or_expression CARET and_expression */
  {  123,   -1 }, /* (55) inclusive_or_expression ::= exclusive_or_expression */
  {  123,   -3 }, /* (56) inclusive_or_expression ::= inclusive_or_expression VERTICAL_BAR exclusive_or_expression */
  {  124,   -1 }, /* (57) logical_and_expression ::= inclusive_or_expression */
  {  124,   -3 }, /* (58) logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression */
  {  125,   -1 }, /* (59) logical_or_expression ::= logical_and_expression */
  {  125,   -3 }, /* (60) logical_or_expression ::= logical_or_expression OR_OP logical_and_expression */
  {  126,   -1 }, /* (61) conditional_expression ::= logical_or_expression */
  {  126,   -5 }, /* (62) conditional_expression ::= logical_or_expression QUESTION expression COLON assignment_expression */
  {  111,   -1 }, /* (63) assignment_expression ::= conditional_expression */
  {  111,   -3 }, /* (64) assignment_expression ::= unary_expression assignment_operator assignment_expression */
  {  127,   -1 }, /* (65) assignment_operator ::= EQUAL */
  {  127,   -1 }, /* (66) assignment_operator ::= MUL_ASSIGN */
  {  127,   -1 }, /* (67) assignment_operator ::= DIV_ASSIGN */
  {  127,   -1 }, /* (68) assignment_operator ::= MOD_ASSIGN */
  {  127,   -1 }, /* (69) assignment_operator ::= ADD_ASSIGN */
  {  127,   -1 }, /* (70) assignment_operator ::= SUB_ASSIGN */
  {  127,   -1 }, /* (71) assignment_operator ::= LEFT_ASSIGN */
  {  127,   -1 }, /* (72) assignment_operator ::= RIGHT_ASSIGN */
  {  127,   -1 }, /* (73) assignment_operator ::= AND_ASSIGN */
  {  127,   -1 }, /* (74) assignment_operator ::= XOR_ASSIGN */
  {  127,   -1 }, /* (75) assignment_operator ::= OR_ASSIGN */
  {  102,   -1 }, /* (76) expression ::= assignment_expression */
  {  102,   -3 }, /* (77) expression ::= expression COMMA assignment_expression */
  {  128,   -1 }, /* (78) constant_expression ::= conditional_expression */
  {  129,   -2 }, /* (79) declaration ::= init_declarator_list SEMICOLON */
  {  131,   -2 }, /* (80) function_prototype ::= function_declarator RS */
  {  132,   -1 }, /* (81) function_declarator ::= function_header */
  {  132,   -1 }, /* (82) function_declarator ::= function_header_with_parameters */
  {  134,   -2 }, /* (83) function_header_with_parameters ::= function_header parameter_declaration */
  {  134,   -3 }, /* (84) function_header_with_parameters ::= function_header_with_parameters COMMA parameter_declaration */
  {  133,   -3 }, /* (85) function_header ::= fully_specified_type IDENTIFIER LS */
  {  137,   -2 }, /* (86) parameter_declarator ::= type_specifier IDENTIFIER */
  {  137,   -3 }, /* (87) parameter_declarator ::= type_specifier IDENTIFIER array_specifier */
  {  135,   -2 }, /* (88) parameter_declaration ::= type_qualifier parameter_declarator */
  {  135,   -1 }, /* (89) parameter_declaration ::= parameter_declarator */
  {  135,   -2 }, /* (90) parameter_declaration ::= type_qualifier parameter_type_specifier */
  {  135,   -1 }, /* (91) parameter_declaration ::= parameter_type_specifier */
  {  140,   -1 }, /* (92) parameter_type_specifier ::= type_specifier */
  {  130,   -1 }, /* (93) init_declarator_list ::= single_declaration */
  {  130,   -3 }, /* (94) init_declarator_list ::= init_declarator_list COMMA IDENTIFIER */
  {  130,   -4 }, /* (95) init_declarator_list ::= init_declarator_list COMMA IDENTIFIER array_specifier */
  {  130,   -6 }, /* (96) init_declarator_list ::= init_declarator_list COMMA IDENTIFIER array_specifier EQUAL initializer */
  {  130,   -5 }, /* (97) init_declarator_list ::= init_declarator_list COMMA IDENTIFIER EQUAL initializer */
  {  141,   -1 }, /* (98) single_declaration ::= fully_specified_type */
  {  141,   -2 }, /* (99) single_declaration ::= fully_specified_type IDENTIFIER */
  {  141,   -3 }, /* (100) single_declaration ::= fully_specified_type IDENTIFIER array_specifier */
  {  141,   -5 }, /* (101) single_declaration ::= fully_specified_type IDENTIFIER array_specifier EQUAL initializer */
  {  141,   -4 }, /* (102) single_declaration ::= fully_specified_type IDENTIFIER EQUAL initializer */
  {  136,   -1 }, /* (103) fully_specified_type ::= type_specifier */
  {  136,   -2 }, /* (104) fully_specified_type ::= type_qualifier type_specifier */
  {  139,   -1 }, /* (105) type_qualifier ::= single_type_qualifier */
  {  139,   -2 }, /* (106) type_qualifier ::= type_qualifier single_type_qualifier */
  {  143,   -1 }, /* (107) single_type_qualifier ::= storage_qualifier */
  {  143,   -1 }, /* (108) single_type_qualifier ::= precision_qualifier */
  {  144,   -1 }, /* (109) storage_qualifier ::= CONST */
  {  144,   -1 }, /* (110) storage_qualifier ::= IN */
  {  144,   -1 }, /* (111) storage_qualifier ::= OUT */
  {  144,   -1 }, /* (112) storage_qualifier ::= INOUT */
  {  144,   -1 }, /* (113) storage_qualifier ::= UNIFORM */
  {  113,   -1 }, /* (114) type_specifier ::= type_specifier_nonarray */
  {  113,   -2 }, /* (115) type_specifier ::= type_specifier_nonarray array_specifier */
  {  138,   -2 }, /* (116) array_specifier ::= LM RM */
  {  138,   -3 }, /* (117) array_specifier ::= LM constant_expression RM */
  {  138,   -3 }, /* (118) array_specifier ::= array_specifier LM RM */
  {  138,   -4 }, /* (119) array_specifier ::= array_specifier LM constant_expression RM */
  {  146,   -2 }, /* (120) type_specifier_nonarray ::= STRUCT IDENTIFIER */
  {  146,   -1 }, /* (121) type_specifier_nonarray ::= VOID */
  {  146,   -1 }, /* (122) type_specifier_nonarray ::= FLOAT */
  {  146,   -1 }, /* (123) type_specifier_nonarray ::= INT */
  {  146,   -1 }, /* (124) type_specifier_nonarray ::= UINT */
  {  146,   -1 }, /* (125) type_specifier_nonarray ::= BOOL */
  {  146,   -1 }, /* (126) type_specifier_nonarray ::= VEC2 */
  {  146,   -1 }, /* (127) type_specifier_nonarray ::= VEC3 */
  {  146,   -1 }, /* (128) type_specifier_nonarray ::= VEC4 */
  {  146,   -1 }, /* (129) type_specifier_nonarray ::= BVEC2 */
  {  146,   -1 }, /* (130) type_specifier_nonarray ::= BVEC3 */
  {  146,   -1 }, /* (131) type_specifier_nonarray ::= BVEC4 */
  {  146,   -1 }, /* (132) type_specifier_nonarray ::= IVEC2 */
  {  146,   -1 }, /* (133) type_specifier_nonarray ::= IVEC3 */
  {  146,   -1 }, /* (134) type_specifier_nonarray ::= IVEC4 */
  {  146,   -1 }, /* (135) type_specifier_nonarray ::= UVEC2 */
  {  146,   -1 }, /* (136) type_specifier_nonarray ::= UVEC3 */
  {  146,   -1 }, /* (137) type_specifier_nonarray ::= UVEC4 */
  {  146,   -1 }, /* (138) type_specifier_nonarray ::= MAT2 */
  {  146,   -1 }, /* (139) type_specifier_nonarray ::= MAT3 */
  {  146,   -1 }, /* (140) type_specifier_nonarray ::= MAT4 */
  {  146,   -1 }, /* (141) type_specifier_nonarray ::= MAT2X2 */
  {  146,   -1 }, /* (142) type_specifier_nonarray ::= MAT2X3 */
  {  146,   -1 }, /* (143) type_specifier_nonarray ::= MAT2X4 */
  {  146,   -1 }, /* (144) type_specifier_nonarray ::= MAT3X2 */
  {  146,   -1 }, /* (145) type_specifier_nonarray ::= MAT3X3 */
  {  146,   -1 }, /* (146) type_specifier_nonarray ::= MAT3X4 */
  {  146,   -1 }, /* (147) type_specifier_nonarray ::= MAT4X2 */
  {  146,   -1 }, /* (148) type_specifier_nonarray ::= MAT4X3 */
  {  146,   -1 }, /* (149) type_specifier_nonarray ::= MAT4X4 */
  {  146,   -1 }, /* (150) type_specifier_nonarray ::= SAMPLER2D */
  {  146,   -1 }, /* (151) type_specifier_nonarray ::= SAMPLER3D */
  {  146,   -1 }, /* (152) type_specifier_nonarray ::= SAMPLERCUBE */
  {  145,   -1 }, /* (153) precision_qualifier ::= HIGH_PRECISION */
  {  145,   -1 }, /* (154) precision_qualifier ::= MEDIUM_PRECISION */
  {  145,   -1 }, /* (155) precision_qualifier ::= LOW_PRECISION */
  {  142,   -1 }, /* (156) initializer ::= assignment_expression */
  {  147,   -1 }, /* (157) declaration_statement ::= declaration */
  {  148,   -1 }, /* (158) statement ::= compound_statement */
  {  148,   -1 }, /* (159) statement ::= simple_statement */
  {  150,   -1 }, /* (160) simple_statement ::= declaration_statement */
  {  150,   -1 }, /* (161) simple_statement ::= expression_statement */
  {  150,   -1 }, /* (162) simple_statement ::= selection_statement */
  {  150,   -1 }, /* (163) simple_statement ::= iteration_statement */
  {  150,   -1 }, /* (164) simple_statement ::= jump_statement */
  {  149,   -2 }, /* (165) compound_statement ::= LB RB */
  {  149,   -3 }, /* (166) compound_statement ::= LB statement_list RB */
  {  155,   -1 }, /* (167) statement_list ::= statement */
  {  155,   -2 }, /* (168) statement_list ::= statement_list statement */
  {  151,   -1 }, /* (169) expression_statement ::= SEMICOLON */
  {  151,   -2 }, /* (170) expression_statement ::= expression SEMICOLON */
  {  152,   -5 }, /* (171) selection_statement ::= IF LS expression RS selection_rest_statement */
  {  156,   -3 }, /* (172) selection_rest_statement ::= statement ELSE statement */
  {  156,   -1 }, /* (173) selection_rest_statement ::= statement */
  {  157,   -1 }, /* (174) condition ::= expression */
  {  157,   -4 }, /* (175) condition ::= fully_specified_type IDENTIFIER EQUAL initializer */
  {  153,   -5 }, /* (176) iteration_statement ::= WHILE LS condition RS statement */
  {  153,   -6 }, /* (177) iteration_statement ::= FOR LS for_init_statement for_rest_statement RS statement */
  {  158,   -1 }, /* (178) for_init_statement ::= expression_statement */
  {  158,   -1 }, /* (179) for_init_statement ::= declaration_statement */
  {  160,   -1 }, /* (180) condition_opt ::= condition */
  {  160,    0 }, /* (181) condition_opt ::= */
  {  159,   -2 }, /* (182) for_rest_statement ::= condition_opt SEMICOLON */
  {  159,   -3 }, /* (183) for_rest_statement ::= condition_opt SEMICOLON expression */
  {  154,   -2 }, /* (184) jump_statement ::= CONTINUE SEMICOLON */
  {  154,   -2 }, /* (185) jump_statement ::= BREAK SEMICOLON */
  {  154,   -2 }, /* (186) jump_statement ::= RETURN SEMICOLON */
  {  154,   -3 }, /* (187) jump_statement ::= RETURN expression SEMICOLON */
  {  154,   -2 }, /* (188) jump_statement ::= DISCARD SEMICOLON */
  {  161,   -1 }, /* (189) translation_unit ::= external_declaration_list */
  {  162,   -1 }, /* (190) external_declaration_list ::= external_declaration */
  {  162,   -2 }, /* (191) external_declaration_list ::= external_declaration_list external_declaration */
  {  163,   -1 }, /* (192) external_declaration ::= function_definition */
  {  163,   -1 }, /* (193) external_declaration ::= declaration */
  {  163,   -1 }, /* (194) external_declaration ::= struct_definition */
  {  164,   -2 }, /* (195) function_definition ::= function_prototype compound_statement */
  {  166,   -1 }, /* (196) declaration_list ::= declaration */
  {  166,   -2 }, /* (197) declaration_list ::= declaration_list declaration */
  {  165,   -6 }, /* (198) struct_definition ::= STRUCT IDENTIFIER LB declaration_list RB SEMICOLON */
};

static void yy_accept(yyParser*);  /* Forward Declaration */

/*
** Perform a reduce action and the shift that must immediately
** follow the reduce.
**
** The yyLookahead and yyLookaheadToken parameters provide reduce actions
** access to the lookahead token (if any).  The yyLookahead will be YYNOCODE
** if the lookahead token has already been consumed.  As this procedure is
** only called from one place, optimizing compilers will in-line it, which
** means that the extra parameters have no performance impact.
*/
static YYACTIONTYPE yy_reduce(
  yyParser *yypParser,         /* The parser */
  unsigned int yyruleno,       /* Number of the rule by which to reduce */
  int yyLookahead,             /* Lookahead token, or YYNOCODE if none */
  TrlSLParser_TOKENTYPE yyLookaheadToken  /* Value of the lookahead token */
  TrlSLParser_CTX_PDECL                   /* %extra_context */
){
  int yygoto;                     /* The next state */
  int yyact;                      /* The next action */
  yyStackEntry *yymsp;            /* The top of the parser's stack */
  int yysize;                     /* Amount to pop the stack */
  TrlSLParser_ARG_FETCH
  (void)yyLookahead;
  (void)yyLookaheadToken;
  yymsp = yypParser->yytos;
#ifndef NDEBUG
  if( yyTraceFILE && yyruleno<(int)(sizeof(yyRuleName)/sizeof(yyRuleName[0])) ){
    yysize = yyRuleInfo[yyruleno].nrhs;
    if( yysize ){
      fprintf(yyTraceFILE, "%sReduce %d [%s], go to state %d.\n",
        yyTracePrompt,
        yyruleno, yyRuleName[yyruleno], yymsp[yysize].stateno);
    }else{
      fprintf(yyTraceFILE, "%sReduce %d [%s].\n",
        yyTracePrompt, yyruleno, yyRuleName[yyruleno]);
    }
  }
#endif /* NDEBUG */

  /* Check that the stack is large enough to grow by a single entry
  ** if the RHS of the rule is empty.  This ensures that there is room
  ** enough on the stack to push the LHS value */
  if( yyRuleInfo[yyruleno].nrhs==0 ){
#ifdef YYTRACKMAXSTACKDEPTH
    if( (int)(yypParser->yytos - yypParser->yystack)>yypParser->yyhwm ){
      yypParser->yyhwm++;
      assert( yypParser->yyhwm == (int)(yypParser->yytos - yypParser->yystack));
    }
#endif
#if YYSTACKDEPTH>0 
    if( yypParser->yytos>=yypParser->yystackEnd ){
      yyStackOverflow(yypParser);
      /* The call to yyStackOverflow() above pops the stack until it is
      ** empty, causing the main parser loop to exit.  So the return value
      ** is never used and does not matter. */
      return 0;
    }
#else
    if( yypParser->yytos>=&yypParser->yystack[yypParser->yystksz-1] ){
      if( yyGrowStack(yypParser) ){
        yyStackOverflow(yypParser);
        /* The call to yyStackOverflow() above pops the stack until it is
        ** empty, causing the main parser loop to exit.  So the return value
        ** is never used and does not matter. */
        return 0;
      }
      yymsp = yypParser->yytos;
    }
#endif
  }

  switch( yyruleno ){
  /* Beginning here are the reduction cases.  A typical example
  ** follows:
  **   case 0:
  **  #line <lineno> <grammarfile>
  **     { ... }           // User supplied code
  **  #line <lineno> <thisfile>
  **     break;
  */
/********** Begin reduce actions **********************************************/
        YYMINORTYPE yylhsminor;
      case 0: /* variable_identifier ::= IDENTIFIER */
{ ruleHandler->variable_identifier__To__IDENTIFIER(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 1: /* primary_expression ::= variable_identifier */
{ ruleHandler->primary_expression__To__variable_identifier(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 2: /* primary_expression ::= INTCONSTANT */
{ ruleHandler->primary_expression__To__INTCONSTANT(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 3: /* primary_expression ::= UINTCONSTANT */
{ ruleHandler->primary_expression__To__UINTCONSTANT(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 4: /* primary_expression ::= FLOATCONSTANT */
{ ruleHandler->primary_expression__To__FLOATCONSTANT(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 5: /* primary_expression ::= BOOLCONSTANT */
{ ruleHandler->primary_expression__To__BOOLCONSTANT(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 6: /* primary_expression ::= LS expression RS */
{ ruleHandler->primary_expression__To__LS___expression___RS(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 7: /* postfix_expression ::= primary_expression */
{ ruleHandler->postfix_expression__To__primary_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 8: /* postfix_expression ::= postfix_expression LM integer_expression RM */
{ ruleHandler->postfix_expression__To__postfix_expression___LM___integer_expression___RM(&yylhsminor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-3].minor.yy0 = yylhsminor.yy0;
        break;
      case 9: /* postfix_expression ::= function_call */
{ ruleHandler->postfix_expression__To__function_call(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 10: /* postfix_expression ::= postfix_expression DOT FIELD_SELECTION */
{ ruleHandler->postfix_expression__To__postfix_expression___DOT___FIELD_SELECTION(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 11: /* postfix_expression ::= postfix_expression INC_OP */
{ ruleHandler->postfix_expression__To__postfix_expression___INC_OP(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 12: /* postfix_expression ::= postfix_expression DEC_OP */
{ ruleHandler->postfix_expression__To__postfix_expression___DEC_OP(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 13: /* integer_expression ::= expression */
{ ruleHandler->integer_expression__To__expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 14: /* function_call ::= function_call_or_method */
{ ruleHandler->function_call__To__function_call_or_method(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 15: /* function_call_or_method ::= function_call_generic */
{ ruleHandler->function_call_or_method__To__function_call_generic(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 16: /* function_call_generic ::= function_call_header_with_parameters RS */
{ ruleHandler->function_call_generic__To__function_call_header_with_parameters___RS(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 17: /* function_call_generic ::= function_call_header_no_parameters RS */
{ ruleHandler->function_call_generic__To__function_call_header_no_parameters___RS(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 18: /* function_call_header_no_parameters ::= function_call_header VOID */
{ ruleHandler->function_call_header_no_parameters__To__function_call_header___VOID(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 19: /* function_call_header_no_parameters ::= function_call_header */
{ ruleHandler->function_call_header_no_parameters__To__function_call_header(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 20: /* function_call_header_with_parameters ::= function_call_header assignment_expression */
{ ruleHandler->function_call_header_with_parameters__To__function_call_header___assignment_expression(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 21: /* function_call_header_with_parameters ::= function_call_header_with_parameters COMMA assignment_expression */
{ ruleHandler->function_call_header_with_parameters__To__function_call_header_with_parameters___COMMA___assignment_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 22: /* function_call_header ::= function_identifier LS */
{ ruleHandler->function_call_header__To__function_identifier___LS(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 23: /* function_identifier ::= type_specifier */
{ ruleHandler->function_identifier__To__type_specifier(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 24: /* function_identifier ::= postfix_expression */
{ ruleHandler->function_identifier__To__postfix_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 25: /* unary_expression ::= postfix_expression */
{ ruleHandler->unary_expression__To__postfix_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 26: /* unary_expression ::= INC_OP unary_expression */
{ ruleHandler->unary_expression__To__INC_OP___unary_expression(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 27: /* unary_expression ::= DEC_OP unary_expression */
{ ruleHandler->unary_expression__To__DEC_OP___unary_expression(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 28: /* unary_expression ::= unary_operator unary_expression */
{ ruleHandler->unary_expression__To__unary_operator___unary_expression(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 29: /* unary_operator ::= PLUS */
{ ruleHandler->unary_operator__To__PLUS(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 30: /* unary_operator ::= DASH */
{ ruleHandler->unary_operator__To__DASH(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 31: /* unary_operator ::= BANG */
{ ruleHandler->unary_operator__To__BANG(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 32: /* unary_operator ::= TILDE */
{ ruleHandler->unary_operator__To__TILDE(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 33: /* multiplicative_expression ::= unary_expression */
{ ruleHandler->multiplicative_expression__To__unary_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 34: /* multiplicative_expression ::= multiplicative_expression STAR unary_expression */
{ ruleHandler->multiplicative_expression__To__multiplicative_expression___STAR___unary_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 35: /* multiplicative_expression ::= multiplicative_expression SLASH unary_expression */
{ ruleHandler->multiplicative_expression__To__multiplicative_expression___SLASH___unary_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 36: /* multiplicative_expression ::= multiplicative_expression PERCENT unary_expression */
{ ruleHandler->multiplicative_expression__To__multiplicative_expression___PERCENT___unary_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 37: /* additive_expression ::= multiplicative_expression */
{ ruleHandler->additive_expression__To__multiplicative_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 38: /* additive_expression ::= additive_expression PLUS multiplicative_expression */
{ ruleHandler->additive_expression__To__additive_expression___PLUS___multiplicative_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 39: /* additive_expression ::= additive_expression DASH multiplicative_expression */
{ ruleHandler->additive_expression__To__additive_expression___DASH___multiplicative_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 40: /* shift_expression ::= additive_expression */
{ ruleHandler->shift_expression__To__additive_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 41: /* shift_expression ::= shift_expression LEFT_OP additive_expression */
{ ruleHandler->shift_expression__To__shift_expression___LEFT_OP___additive_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 42: /* shift_expression ::= shift_expression RIGHT_OP additive_expression */
{ ruleHandler->shift_expression__To__shift_expression___RIGHT_OP___additive_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 43: /* relational_expression ::= shift_expression */
{ ruleHandler->relational_expression__To__shift_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 44: /* relational_expression ::= relational_expression LEFT_ANGLE shift_expression */
{ ruleHandler->relational_expression__To__relational_expression___LEFT_ANGLE___shift_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 45: /* relational_expression ::= relational_expression RIGHT_ANGLE shift_expression */
{ ruleHandler->relational_expression__To__relational_expression___RIGHT_ANGLE___shift_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 46: /* relational_expression ::= relational_expression LE_OP shift_expression */
{ ruleHandler->relational_expression__To__relational_expression___LE_OP___shift_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 47: /* relational_expression ::= relational_expression GE_OP shift_expression */
{ ruleHandler->relational_expression__To__relational_expression___GE_OP___shift_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 48: /* equality_expression ::= relational_expression */
{ ruleHandler->equality_expression__To__relational_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 49: /* equality_expression ::= equality_expression EQ_OP relational_expression */
{ ruleHandler->equality_expression__To__equality_expression___EQ_OP___relational_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 50: /* equality_expression ::= equality_expression NE_OP relational_expression */
{ ruleHandler->equality_expression__To__equality_expression___NE_OP___relational_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 51: /* and_expression ::= equality_expression */
{ ruleHandler->and_expression__To__equality_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 52: /* and_expression ::= and_expression AMPERSAND equality_expression */
{ ruleHandler->and_expression__To__and_expression___AMPERSAND___equality_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 53: /* exclusive_or_expression ::= and_expression */
{ ruleHandler->exclusive_or_expression__To__and_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 54: /* exclusive_or_expression ::= exclusive_or_expression CARET and_expression */
{ ruleHandler->exclusive_or_expression__To__exclusive_or_expression___CARET___and_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 55: /* inclusive_or_expression ::= exclusive_or_expression */
{ ruleHandler->inclusive_or_expression__To__exclusive_or_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 56: /* inclusive_or_expression ::= inclusive_or_expression VERTICAL_BAR exclusive_or_expression */
{ ruleHandler->inclusive_or_expression__To__inclusive_or_expression___VERTICAL_BAR___exclusive_or_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 57: /* logical_and_expression ::= inclusive_or_expression */
{ ruleHandler->logical_and_expression__To__inclusive_or_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 58: /* logical_and_expression ::= logical_and_expression AND_OP inclusive_or_expression */
{ ruleHandler->logical_and_expression__To__logical_and_expression___AND_OP___inclusive_or_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 59: /* logical_or_expression ::= logical_and_expression */
{ ruleHandler->logical_or_expression__To__logical_and_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 60: /* logical_or_expression ::= logical_or_expression OR_OP logical_and_expression */
{ ruleHandler->logical_or_expression__To__logical_or_expression___OR_OP___logical_and_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 61: /* conditional_expression ::= logical_or_expression */
{ ruleHandler->conditional_expression__To__logical_or_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 62: /* conditional_expression ::= logical_or_expression QUESTION expression COLON assignment_expression */
{ ruleHandler->conditional_expression__To__logical_or_expression___QUESTION___expression___COLON___assignment_expression(&yylhsminor.yy0, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-4].minor.yy0 = yylhsminor.yy0;
        break;
      case 63: /* assignment_expression ::= conditional_expression */
{ ruleHandler->assignment_expression__To__conditional_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 64: /* assignment_expression ::= unary_expression assignment_operator assignment_expression */
{ ruleHandler->assignment_expression__To__unary_expression___assignment_operator___assignment_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 65: /* assignment_operator ::= EQUAL */
{ ruleHandler->assignment_operator__To__EQUAL(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 66: /* assignment_operator ::= MUL_ASSIGN */
{ ruleHandler->assignment_operator__To__MUL_ASSIGN(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 67: /* assignment_operator ::= DIV_ASSIGN */
{ ruleHandler->assignment_operator__To__DIV_ASSIGN(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 68: /* assignment_operator ::= MOD_ASSIGN */
{ ruleHandler->assignment_operator__To__MOD_ASSIGN(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 69: /* assignment_operator ::= ADD_ASSIGN */
{ ruleHandler->assignment_operator__To__ADD_ASSIGN(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 70: /* assignment_operator ::= SUB_ASSIGN */
{ ruleHandler->assignment_operator__To__SUB_ASSIGN(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 71: /* assignment_operator ::= LEFT_ASSIGN */
{ ruleHandler->assignment_operator__To__LEFT_ASSIGN(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 72: /* assignment_operator ::= RIGHT_ASSIGN */
{ ruleHandler->assignment_operator__To__RIGHT_ASSIGN(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 73: /* assignment_operator ::= AND_ASSIGN */
{ ruleHandler->assignment_operator__To__AND_ASSIGN(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 74: /* assignment_operator ::= XOR_ASSIGN */
{ ruleHandler->assignment_operator__To__XOR_ASSIGN(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 75: /* assignment_operator ::= OR_ASSIGN */
{ ruleHandler->assignment_operator__To__OR_ASSIGN(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 76: /* expression ::= assignment_expression */
{ ruleHandler->expression__To__assignment_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 77: /* expression ::= expression COMMA assignment_expression */
{ ruleHandler->expression__To__expression___COMMA___assignment_expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 78: /* constant_expression ::= conditional_expression */
{ ruleHandler->constant_expression__To__conditional_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 79: /* declaration ::= init_declarator_list SEMICOLON */
{ ruleHandler->declaration__To__init_declarator_list___SEMICOLON(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 80: /* function_prototype ::= function_declarator RS */
{ ruleHandler->function_prototype__To__function_declarator___RS(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 81: /* function_declarator ::= function_header */
{ ruleHandler->function_declarator__To__function_header(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 82: /* function_declarator ::= function_header_with_parameters */
{ ruleHandler->function_declarator__To__function_header_with_parameters(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 83: /* function_header_with_parameters ::= function_header parameter_declaration */
{ ruleHandler->function_header_with_parameters__To__function_header___parameter_declaration(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 84: /* function_header_with_parameters ::= function_header_with_parameters COMMA parameter_declaration */
{ ruleHandler->function_header_with_parameters__To__function_header_with_parameters___COMMA___parameter_declaration(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 85: /* function_header ::= fully_specified_type IDENTIFIER LS */
{ ruleHandler->function_header__To__fully_specified_type___IDENTIFIER___LS(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 86: /* parameter_declarator ::= type_specifier IDENTIFIER */
{ ruleHandler->parameter_declarator__To__type_specifier___IDENTIFIER(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 87: /* parameter_declarator ::= type_specifier IDENTIFIER array_specifier */
{ ruleHandler->parameter_declarator__To__type_specifier___IDENTIFIER___array_specifier(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 88: /* parameter_declaration ::= type_qualifier parameter_declarator */
{ ruleHandler->parameter_declaration__To__type_qualifier___parameter_declarator(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 89: /* parameter_declaration ::= parameter_declarator */
{ ruleHandler->parameter_declaration__To__parameter_declarator(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 90: /* parameter_declaration ::= type_qualifier parameter_type_specifier */
{ ruleHandler->parameter_declaration__To__type_qualifier___parameter_type_specifier(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 91: /* parameter_declaration ::= parameter_type_specifier */
{ ruleHandler->parameter_declaration__To__parameter_type_specifier(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 92: /* parameter_type_specifier ::= type_specifier */
{ ruleHandler->parameter_type_specifier__To__type_specifier(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 93: /* init_declarator_list ::= single_declaration */
{ ruleHandler->init_declarator_list__To__single_declaration(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 94: /* init_declarator_list ::= init_declarator_list COMMA IDENTIFIER */
{ ruleHandler->init_declarator_list__To__init_declarator_list___COMMA___IDENTIFIER(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 95: /* init_declarator_list ::= init_declarator_list COMMA IDENTIFIER array_specifier */
{ ruleHandler->init_declarator_list__To__init_declarator_list___COMMA___IDENTIFIER___array_specifier(&yylhsminor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-3].minor.yy0 = yylhsminor.yy0;
        break;
      case 96: /* init_declarator_list ::= init_declarator_list COMMA IDENTIFIER array_specifier EQUAL initializer */
{ ruleHandler->init_declarator_list__To__init_declarator_list___COMMA___IDENTIFIER___array_specifier___EQUAL___initializer(&yylhsminor.yy0, yymsp[-5].minor.yy0, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-5].minor.yy0 = yylhsminor.yy0;
        break;
      case 97: /* init_declarator_list ::= init_declarator_list COMMA IDENTIFIER EQUAL initializer */
{ ruleHandler->init_declarator_list__To__init_declarator_list___COMMA___IDENTIFIER___EQUAL___initializer(&yylhsminor.yy0, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-4].minor.yy0 = yylhsminor.yy0;
        break;
      case 98: /* single_declaration ::= fully_specified_type */
{ ruleHandler->single_declaration__To__fully_specified_type(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 99: /* single_declaration ::= fully_specified_type IDENTIFIER */
{ ruleHandler->single_declaration__To__fully_specified_type___IDENTIFIER(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 100: /* single_declaration ::= fully_specified_type IDENTIFIER array_specifier */
{ ruleHandler->single_declaration__To__fully_specified_type___IDENTIFIER___array_specifier(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 101: /* single_declaration ::= fully_specified_type IDENTIFIER array_specifier EQUAL initializer */
{ ruleHandler->single_declaration__To__fully_specified_type___IDENTIFIER___array_specifier___EQUAL___initializer(&yylhsminor.yy0, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-4].minor.yy0 = yylhsminor.yy0;
        break;
      case 102: /* single_declaration ::= fully_specified_type IDENTIFIER EQUAL initializer */
{ ruleHandler->single_declaration__To__fully_specified_type___IDENTIFIER___EQUAL___initializer(&yylhsminor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-3].minor.yy0 = yylhsminor.yy0;
        break;
      case 103: /* fully_specified_type ::= type_specifier */
{ ruleHandler->fully_specified_type__To__type_specifier(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 104: /* fully_specified_type ::= type_qualifier type_specifier */
{ ruleHandler->fully_specified_type__To__type_qualifier___type_specifier(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 105: /* type_qualifier ::= single_type_qualifier */
{ ruleHandler->type_qualifier__To__single_type_qualifier(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 106: /* type_qualifier ::= type_qualifier single_type_qualifier */
{ ruleHandler->type_qualifier__To__type_qualifier___single_type_qualifier(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 107: /* single_type_qualifier ::= storage_qualifier */
{ ruleHandler->single_type_qualifier__To__storage_qualifier(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 108: /* single_type_qualifier ::= precision_qualifier */
{ ruleHandler->single_type_qualifier__To__precision_qualifier(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 109: /* storage_qualifier ::= CONST */
{ ruleHandler->storage_qualifier__To__CONST(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 110: /* storage_qualifier ::= IN */
{ ruleHandler->storage_qualifier__To__IN(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 111: /* storage_qualifier ::= OUT */
{ ruleHandler->storage_qualifier__To__OUT(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 112: /* storage_qualifier ::= INOUT */
{ ruleHandler->storage_qualifier__To__INOUT(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 113: /* storage_qualifier ::= UNIFORM */
{ ruleHandler->storage_qualifier__To__UNIFORM(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 114: /* type_specifier ::= type_specifier_nonarray */
{ ruleHandler->type_specifier__To__type_specifier_nonarray(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 115: /* type_specifier ::= type_specifier_nonarray array_specifier */
{ ruleHandler->type_specifier__To__type_specifier_nonarray___array_specifier(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 116: /* array_specifier ::= LM RM */
{ ruleHandler->array_specifier__To__LM___RM(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 117: /* array_specifier ::= LM constant_expression RM */
{ ruleHandler->array_specifier__To__LM___constant_expression___RM(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 118: /* array_specifier ::= array_specifier LM RM */
{ ruleHandler->array_specifier__To__array_specifier___LM___RM(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 119: /* array_specifier ::= array_specifier LM constant_expression RM */
{ ruleHandler->array_specifier__To__array_specifier___LM___constant_expression___RM(&yylhsminor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-3].minor.yy0 = yylhsminor.yy0;
        break;
      case 120: /* type_specifier_nonarray ::= STRUCT IDENTIFIER */
{ ruleHandler->type_specifier_nonarray__To__STRUCT__IDENTIFIER(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 121: /* type_specifier_nonarray ::= VOID */
{ ruleHandler->type_specifier_nonarray__To__VOID(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 122: /* type_specifier_nonarray ::= FLOAT */
{ ruleHandler->type_specifier_nonarray__To__FLOAT(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 123: /* type_specifier_nonarray ::= INT */
{ ruleHandler->type_specifier_nonarray__To__INT(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 124: /* type_specifier_nonarray ::= UINT */
{ ruleHandler->type_specifier_nonarray__To__UINT(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 125: /* type_specifier_nonarray ::= BOOL */
{ ruleHandler->type_specifier_nonarray__To__BOOL(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 126: /* type_specifier_nonarray ::= VEC2 */
{ ruleHandler->type_specifier_nonarray__To__VEC2(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 127: /* type_specifier_nonarray ::= VEC3 */
{ ruleHandler->type_specifier_nonarray__To__VEC3(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 128: /* type_specifier_nonarray ::= VEC4 */
{ ruleHandler->type_specifier_nonarray__To__VEC4(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 129: /* type_specifier_nonarray ::= BVEC2 */
{ ruleHandler->type_specifier_nonarray__To__BVEC2(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 130: /* type_specifier_nonarray ::= BVEC3 */
{ ruleHandler->type_specifier_nonarray__To__BVEC3(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 131: /* type_specifier_nonarray ::= BVEC4 */
{ ruleHandler->type_specifier_nonarray__To__BVEC4(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 132: /* type_specifier_nonarray ::= IVEC2 */
{ ruleHandler->type_specifier_nonarray__To__IVEC2(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 133: /* type_specifier_nonarray ::= IVEC3 */
{ ruleHandler->type_specifier_nonarray__To__IVEC3(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 134: /* type_specifier_nonarray ::= IVEC4 */
{ ruleHandler->type_specifier_nonarray__To__IVEC4(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 135: /* type_specifier_nonarray ::= UVEC2 */
{ ruleHandler->type_specifier_nonarray__To__UVEC2(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 136: /* type_specifier_nonarray ::= UVEC3 */
{ ruleHandler->type_specifier_nonarray__To__UVEC3(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 137: /* type_specifier_nonarray ::= UVEC4 */
{ ruleHandler->type_specifier_nonarray__To__UVEC4(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 138: /* type_specifier_nonarray ::= MAT2 */
{ ruleHandler->type_specifier_nonarray__To__MAT2(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 139: /* type_specifier_nonarray ::= MAT3 */
{ ruleHandler->type_specifier_nonarray__To__MAT3(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 140: /* type_specifier_nonarray ::= MAT4 */
{ ruleHandler->type_specifier_nonarray__To__MAT4(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 141: /* type_specifier_nonarray ::= MAT2X2 */
{ ruleHandler->type_specifier_nonarray__To__MAT2X2(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 142: /* type_specifier_nonarray ::= MAT2X3 */
{ ruleHandler->type_specifier_nonarray__To__MAT2X3(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 143: /* type_specifier_nonarray ::= MAT2X4 */
{ ruleHandler->type_specifier_nonarray__To__MAT2X4(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 144: /* type_specifier_nonarray ::= MAT3X2 */
{ ruleHandler->type_specifier_nonarray__To__MAT3X2(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 145: /* type_specifier_nonarray ::= MAT3X3 */
{ ruleHandler->type_specifier_nonarray__To__MAT3X3(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 146: /* type_specifier_nonarray ::= MAT3X4 */
{ ruleHandler->type_specifier_nonarray__To__MAT3X4(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 147: /* type_specifier_nonarray ::= MAT4X2 */
{ ruleHandler->type_specifier_nonarray__To__MAT4X2(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 148: /* type_specifier_nonarray ::= MAT4X3 */
{ ruleHandler->type_specifier_nonarray__To__MAT4X3(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 149: /* type_specifier_nonarray ::= MAT4X4 */
{ ruleHandler->type_specifier_nonarray__To__MAT4X4(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 150: /* type_specifier_nonarray ::= SAMPLER2D */
{ ruleHandler->type_specifier_nonarray__To__SAMPLER2D(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 151: /* type_specifier_nonarray ::= SAMPLER3D */
{ ruleHandler->type_specifier_nonarray__To__SAMPLER3D(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 152: /* type_specifier_nonarray ::= SAMPLERCUBE */
{ ruleHandler->type_specifier_nonarray__To__SAMPLERCUBE(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 153: /* precision_qualifier ::= HIGH_PRECISION */
{ ruleHandler->precision_qualifier__To__HIGH_PRECISION(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 154: /* precision_qualifier ::= MEDIUM_PRECISION */
{ ruleHandler->precision_qualifier__To__MEDIUM_PRECISION(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 155: /* precision_qualifier ::= LOW_PRECISION */
{ ruleHandler->precision_qualifier__To__LOW_PRECISION(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 156: /* initializer ::= assignment_expression */
{ ruleHandler->initializer__To__assignment_expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 157: /* declaration_statement ::= declaration */
{ ruleHandler->declaration_statement__To__declaration(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 158: /* statement ::= compound_statement */
{ ruleHandler->statement__To__compound_statement(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 159: /* statement ::= simple_statement */
{ ruleHandler->statement__To__simple_statement(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 160: /* simple_statement ::= declaration_statement */
{ ruleHandler->simple_statement__To__declaration_statement(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 161: /* simple_statement ::= expression_statement */
{ ruleHandler->simple_statement__To__expression_statement(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 162: /* simple_statement ::= selection_statement */
{ ruleHandler->simple_statement__To__selection_statement(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 163: /* simple_statement ::= iteration_statement */
{ ruleHandler->simple_statement__To__iteration_statement(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 164: /* simple_statement ::= jump_statement */
{ ruleHandler->simple_statement__To__jump_statement(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 165: /* compound_statement ::= LB RB */
{ ruleHandler->compound_statement__To__LB___RB(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 166: /* compound_statement ::= LB statement_list RB */
{ ruleHandler->compound_statement__To__LB___statement_list___RB(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 167: /* statement_list ::= statement */
{ ruleHandler->statement_list__To__statement(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 168: /* statement_list ::= statement_list statement */
{ ruleHandler->statement_list__To__statement_list___statement(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 169: /* expression_statement ::= SEMICOLON */
{ ruleHandler->expression_statement__To__SEMICOLON(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 170: /* expression_statement ::= expression SEMICOLON */
{ ruleHandler->expression_statement__To__expression___SEMICOLON(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 171: /* selection_statement ::= IF LS expression RS selection_rest_statement */
{ ruleHandler->selection_statement__To__IF___LS___expression___RS___selection_rest_statement(&yylhsminor.yy0, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-4].minor.yy0 = yylhsminor.yy0;
        break;
      case 172: /* selection_rest_statement ::= statement ELSE statement */
{ ruleHandler->selection_rest_statement__To__statement___ELSE___statement(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 173: /* selection_rest_statement ::= statement */
{ ruleHandler->selection_rest_statement__To__statement(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 174: /* condition ::= expression */
{ ruleHandler->condition__To__expression(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 175: /* condition ::= fully_specified_type IDENTIFIER EQUAL initializer */
{ ruleHandler->condition__To__fully_specified_type___IDENTIFIER___EQUAL___initializer(&yylhsminor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-3].minor.yy0 = yylhsminor.yy0;
        break;
      case 176: /* iteration_statement ::= WHILE LS condition RS statement */
{ ruleHandler->iteration_statement__To__WHILE___LS___condition___RS___statement(&yylhsminor.yy0, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-4].minor.yy0 = yylhsminor.yy0;
        break;
      case 177: /* iteration_statement ::= FOR LS for_init_statement for_rest_statement RS statement */
{ ruleHandler->iteration_statement__To__FOR___LS___for_init_statement___for_rest_statement___RS___statement(&yylhsminor.yy0, yymsp[-5].minor.yy0, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-5].minor.yy0 = yylhsminor.yy0;
        break;
      case 178: /* for_init_statement ::= expression_statement */
{ ruleHandler->for_init_statement__To__expression_statement(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 179: /* for_init_statement ::= declaration_statement */
{ ruleHandler->for_init_statement__To__declaration_statement(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 180: /* condition_opt ::= condition */
{ ruleHandler->condition_opt__To__condition(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 181: /* condition_opt ::= */
{ ruleHandler->condition_opt__To__Empty(&yymsp[1].minor.yy0); }
        break;
      case 182: /* for_rest_statement ::= condition_opt SEMICOLON */
{ ruleHandler->for_rest_statement__To__condition_opt___SEMICOLON(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 183: /* for_rest_statement ::= condition_opt SEMICOLON expression */
{ ruleHandler->for_rest_statement__To__condition_opt___SEMICOLON___expression(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 184: /* jump_statement ::= CONTINUE SEMICOLON */
{ ruleHandler->jump_statement__To__CONTINUE___SEMICOLON(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 185: /* jump_statement ::= BREAK SEMICOLON */
{ ruleHandler->jump_statement__To__BREAK___SEMICOLON(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 186: /* jump_statement ::= RETURN SEMICOLON */
{ ruleHandler->jump_statement__To__RETURN___SEMICOLON(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 187: /* jump_statement ::= RETURN expression SEMICOLON */
{ ruleHandler->jump_statement__To__RETURN___expression___SEMICOLON(&yylhsminor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-2].minor.yy0 = yylhsminor.yy0;
        break;
      case 188: /* jump_statement ::= DISCARD SEMICOLON */
{ ruleHandler->jump_statement__To__DISCARD___SEMICOLON(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 189: /* translation_unit ::= external_declaration_list */
{ ruleHandler->translation_unit__To__external_declaration_list(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 190: /* external_declaration_list ::= external_declaration */
{ ruleHandler->external_declaration_list__To__external_declaration(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 191: /* external_declaration_list ::= external_declaration_list external_declaration */
{ ruleHandler->external_declaration_list__To__external_declaration_list___external_declaration(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 192: /* external_declaration ::= function_definition */
{ ruleHandler->external_declaration__To__function_definition(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 193: /* external_declaration ::= declaration */
{ ruleHandler->external_declaration__To__declaration(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 194: /* external_declaration ::= struct_definition */
{ ruleHandler->external_declaration__To__struct_definition(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 195: /* function_definition ::= function_prototype compound_statement */
{ ruleHandler->function_definition__To__function_prototype___compound_statement(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 196: /* declaration_list ::= declaration */
{ ruleHandler->declaration_list__To__declaration(&yylhsminor.yy0, yymsp[0].minor.yy0); }
  yymsp[0].minor.yy0 = yylhsminor.yy0;
        break;
      case 197: /* declaration_list ::= declaration_list declaration */
{ ruleHandler->declaration_list__To__declaration_list__declaration(&yylhsminor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-1].minor.yy0 = yylhsminor.yy0;
        break;
      case 198: /* struct_definition ::= STRUCT IDENTIFIER LB declaration_list RB SEMICOLON */
{ ruleHandler->struct_definition__To__STRUCT__IDENTIFIER__LB__declaration_list__RB__SEMICOLON(&yylhsminor.yy0, yymsp[-5].minor.yy0, yymsp[-4].minor.yy0, yymsp[-3].minor.yy0, yymsp[-2].minor.yy0, yymsp[-1].minor.yy0, yymsp[0].minor.yy0); }
  yymsp[-5].minor.yy0 = yylhsminor.yy0;
        break;
      default:
        break;
/********** End reduce actions ************************************************/
  };
  assert( yyruleno<sizeof(yyRuleInfo)/sizeof(yyRuleInfo[0]) );
  yygoto = yyRuleInfo[yyruleno].lhs;
  yysize = yyRuleInfo[yyruleno].nrhs;
  yyact = yy_find_reduce_action(yymsp[yysize].stateno,(YYCODETYPE)yygoto);

  /* There are no SHIFTREDUCE actions on nonterminals because the table
  ** generator has simplified them to pure REDUCE actions. */
  assert( !(yyact>YY_MAX_SHIFT && yyact<=YY_MAX_SHIFTREDUCE) );

  /* It is not possible for a REDUCE to be followed by an error */
  assert( yyact!=YY_ERROR_ACTION );

  yymsp += yysize+1;
  yypParser->yytos = yymsp;
  yymsp->stateno = (YYACTIONTYPE)yyact;
  yymsp->major = (YYCODETYPE)yygoto;
  yyTraceShift(yypParser, yyact, "... then shift");
  return yyact;
}

/*
** The following code executes when the parse fails
*/
#ifndef YYNOERRORRECOVERY
static void yy_parse_failed(
  yyParser *yypParser           /* The parser */
){
  TrlSLParser_ARG_FETCH
  TrlSLParser_CTX_FETCH
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sFail!\n",yyTracePrompt);
  }
#endif
  while( yypParser->yytos>yypParser->yystack ) yy_pop_parser_stack(yypParser);
  /* Here code is inserted which will be executed whenever the
  ** parser fails */
/************ Begin %parse_failure code ***************************************/

    ruleHandler->ParseFailure();
/************ End %parse_failure code *****************************************/
  TrlSLParser_ARG_STORE /* Suppress warning about unused %extra_argument variable */
  TrlSLParser_CTX_STORE
}
#endif /* YYNOERRORRECOVERY */

/*
** The following code executes when a syntax error first occurs.
*/
static void yy_syntax_error(
  yyParser *yypParser,           /* The parser */
  int yymajor,                   /* The major type of the error token */
  TrlSLParser_TOKENTYPE yyminor         /* The minor type of the error token */
){
  TrlSLParser_ARG_FETCH
  TrlSLParser_CTX_FETCH
#define TOKEN yyminor
/************ Begin %syntax_error code ****************************************/

    ruleHandler->SyntaxError();
/************ End %syntax_error code ******************************************/
  TrlSLParser_ARG_STORE /* Suppress warning about unused %extra_argument variable */
  TrlSLParser_CTX_STORE
}

/*
** The following is executed when the parser accepts
*/
static void yy_accept(
  yyParser *yypParser           /* The parser */
){
  TrlSLParser_ARG_FETCH
  TrlSLParser_CTX_FETCH
#ifndef NDEBUG
  if( yyTraceFILE ){
    fprintf(yyTraceFILE,"%sAccept!\n",yyTracePrompt);
  }
#endif
#ifndef YYNOERRORRECOVERY
  yypParser->yyerrcnt = -1;
#endif
  assert( yypParser->yytos==yypParser->yystack );
  /* Here code is inserted which will be executed whenever the
  ** parser accepts */
/*********** Begin %parse_accept code *****************************************/

    ruleHandler->ParseAccept();
/*********** End %parse_accept code *******************************************/
  TrlSLParser_ARG_STORE /* Suppress warning about unused %extra_argument variable */
  TrlSLParser_CTX_STORE
}

/* The main parser program.
** The first argument is a pointer to a structure obtained from
** "TrlSLParser_Alloc" which describes the current state of the parser.
** The second argument is the major token number.  The third is
** the minor token.  The fourth optional argument is whatever the
** user wants (and specified in the grammar) and is available for
** use by the action routines.
**
** Inputs:
** <ul>
** <li> A pointer to the parser (an opaque structure.)
** <li> The major token number.
** <li> The minor token number.
** <li> An option argument of a grammar-specified type.
** </ul>
**
** Outputs:
** None.
*/
void TrlSLParser_(
  void *yyp,                   /* The parser */
  int yymajor,                 /* The major token code number */
  TrlSLParser_TOKENTYPE yyminor       /* The value for the token */
  TrlSLParser_ARG_PDECL               /* Optional %extra_argument parameter */
){
  YYMINORTYPE yyminorunion;
  YYACTIONTYPE yyact;   /* The parser action. */
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  int yyendofinput;     /* True if we are at the end of input */
#endif
#ifdef YYERRORSYMBOL
  int yyerrorhit = 0;   /* True if yymajor has invoked an error */
#endif
  yyParser *yypParser = (yyParser*)yyp;  /* The parser */
  TrlSLParser_CTX_FETCH
  TrlSLParser_ARG_STORE

  assert( yypParser->yytos!=0 );
#if !defined(YYERRORSYMBOL) && !defined(YYNOERRORRECOVERY)
  yyendofinput = (yymajor==0);
#endif

  yyact = yypParser->yytos->stateno;
#ifndef NDEBUG
  if( yyTraceFILE ){
    if( yyact < YY_MIN_REDUCE ){
      fprintf(yyTraceFILE,"%sInput '%s' in state %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact);
    }else{
      fprintf(yyTraceFILE,"%sInput '%s' with pending reduce %d\n",
              yyTracePrompt,yyTokenName[yymajor],yyact-YY_MIN_REDUCE);
    }
  }
#endif

  do{
    assert( yyact==yypParser->yytos->stateno );
    yyact = yy_find_shift_action(yymajor,yyact);
    if( yyact >= YY_MIN_REDUCE ){
      yyact = yy_reduce(yypParser,yyact-YY_MIN_REDUCE,yymajor,
                        yyminor TrlSLParser_CTX_PARAM);
    }else if( yyact <= YY_MAX_SHIFTREDUCE ){
      yy_shift(yypParser,yyact,yymajor,yyminor);
#ifndef YYNOERRORRECOVERY
      yypParser->yyerrcnt--;
#endif
      break;
    }else if( yyact==YY_ACCEPT_ACTION ){
      yypParser->yytos--;
      yy_accept(yypParser);
      return;
    }else{
      assert( yyact == YY_ERROR_ACTION );
      yyminorunion.yy0 = yyminor;
#ifdef YYERRORSYMBOL
      int yymx;
#endif
#ifndef NDEBUG
      if( yyTraceFILE ){
        fprintf(yyTraceFILE,"%sSyntax Error!\n",yyTracePrompt);
      }
#endif
#ifdef YYERRORSYMBOL
      /* A syntax error has occurred.
      ** The response to an error depends upon whether or not the
      ** grammar defines an error token "ERROR".  
      **
      ** This is what we do if the grammar does define ERROR:
      **
      **  * Call the %syntax_error function.
      **
      **  * Begin popping the stack until we enter a state where
      **    it is legal to shift the error symbol, then shift
      **    the error symbol.
      **
      **  * Set the error count to three.
      **
      **  * Begin accepting and shifting new tokens.  No new error
      **    processing will occur until three tokens have been
      **    shifted successfully.
      **
      */
      if( yypParser->yyerrcnt<0 ){
        yy_syntax_error(yypParser,yymajor,yyminor);
      }
      yymx = yypParser->yytos->major;
      if( yymx==YYERRORSYMBOL || yyerrorhit ){
#ifndef NDEBUG
        if( yyTraceFILE ){
          fprintf(yyTraceFILE,"%sDiscard input token %s\n",
             yyTracePrompt,yyTokenName[yymajor]);
        }
#endif
        yy_destructor(yypParser, (YYCODETYPE)yymajor, &yyminorunion);
        yymajor = YYNOCODE;
      }else{
        while( yypParser->yytos >= yypParser->yystack
            && yymx != YYERRORSYMBOL
            && (yyact = yy_find_reduce_action(
                        yypParser->yytos->stateno,
                        YYERRORSYMBOL)) >= YY_MIN_REDUCE
        ){
          yy_pop_parser_stack(yypParser);
        }
        if( yypParser->yytos < yypParser->yystack || yymajor==0 ){
          yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
          yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
          yypParser->yyerrcnt = -1;
#endif
          yymajor = YYNOCODE;
        }else if( yymx!=YYERRORSYMBOL ){
          yy_shift(yypParser,yyact,YYERRORSYMBOL,yyminor);
        }
      }
      yypParser->yyerrcnt = 3;
      yyerrorhit = 1;
      if( yymajor==YYNOCODE ) break;
      yyact = yypParser->yytos->stateno;
#elif defined(YYNOERRORRECOVERY)
      /* If the YYNOERRORRECOVERY macro is defined, then do not attempt to
      ** do any kind of error recovery.  Instead, simply invoke the syntax
      ** error routine and continue going as if nothing had happened.
      **
      ** Applications can set this macro (for example inside %include) if
      ** they intend to abandon the parse upon the first syntax error seen.
      */
      yy_syntax_error(yypParser,yymajor, yyminor);
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      break;
#else  /* YYERRORSYMBOL is not defined */
      /* This is what we do if the grammar does not define ERROR:
      **
      **  * Report an error message, and throw away the input token.
      **
      **  * If the input token is $, then fail the parse.
      **
      ** As before, subsequent error messages are suppressed until
      ** three input tokens have been successfully shifted.
      */
      if( yypParser->yyerrcnt<=0 ){
        yy_syntax_error(yypParser,yymajor, yyminor);
      }
      yypParser->yyerrcnt = 3;
      yy_destructor(yypParser,(YYCODETYPE)yymajor,&yyminorunion);
      if( yyendofinput ){
        yy_parse_failed(yypParser);
#ifndef YYNOERRORRECOVERY
        yypParser->yyerrcnt = -1;
#endif
      }
      break;
#endif
    }
  }while( yypParser->yytos>yypParser->yystack );
#ifndef NDEBUG
  if( yyTraceFILE ){
    yyStackEntry *i;
    char cDiv = '[';
    fprintf(yyTraceFILE,"%sReturn. Stack=",yyTracePrompt);
    for(i=&yypParser->yystack[1]; i<=yypParser->yytos; i++){
      fprintf(yyTraceFILE,"%c%s", cDiv, yyTokenName[i->major]);
      cDiv = ' ';
    }
    fprintf(yyTraceFILE,"]\n");
  }
#endif
  return;
}
