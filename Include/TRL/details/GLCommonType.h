#include "glad/glad.h"

#include "ToyUtility/Prerequisites/PreDefine.h"
#include "TRLConfig.h"


namespace TRL
{


using GpuBufferObjectInner = GLuint;
using GpuVAOInner = GLuint;
using GpuShaderInner = GLuint;
using GpuProgramInner = GLuint;
using GpuTextureInner = GLuint;

using GpuBool = GLboolean;
using GpuVoid = GLvoid;
using GpuByte = GLbyte;
using GpuShort = GLshort;
using GpuInt = GLint;
using GpuClampx = GLclampx;
using GpuUByte = GLubyte;
using GpuUShort = GLushort;
using GpuUInt = GLuint;
using GpuSizei = GLsizei;
using GpuFloat = GLfloat;
using GpuHalf = GLhalf;
using GpuFixed = GLfixed;
using GpuClampf = GLclampf;
using GpuDouble = GLdouble;
using GpuClampd = GLclampd;
using GpuFloat = GLfloat;


enum GpuPrimitiveType
{
    GPU_PRIMITIVE_TYPE_INIT = 0,

    GPU_POINTS = GL_POINTS,
    GPU_LINE_STRIP = GL_LINE_STRIP,
    GPU_LINE_LOOP = GL_LINE_LOOP,
    GPU_LINES = GL_LINES,
    GPU_TRIANGLE_STRIP = GL_TRIANGLE_STRIP,
    GPU_TRIANGLE_FAN = GL_TRIANGLE_FAN,
    GPU_TRIANGLES = GL_TRIANGLES,
};

enum GpuDataType
{
    GPU_DATA_TYPE_INIT = 0,

    GPU_BOOL = GL_BOOL,

    GPU_BYTE = GL_BYTE,
    GPU_UNSIGNED_BYTE = GL_UNSIGNED_BYTE,
    GPU_SHORT = GL_SHORT,
    GPU_UNSIGNED_SHORT = GL_UNSIGNED_SHORT,
    GPU_INT = GL_INT,
    GPU_UNSIGNED_INT = GL_UNSIGNED_INT,
    GPU_HALF_FLOAT = GL_HALF_FLOAT,
    GPU_FLOAT = GL_FLOAT,
    GPU_FIXED = GL_FIXED,


    GPU_FLOAT_VEC2 = GL_FLOAT_VEC2,
    GPU_FLOAT_VEC3 = GL_FLOAT_VEC3,
    GPU_FLOAT_VEC4 = GL_FLOAT_VEC4,
    GPU_INT_VEC2 = GL_INT_VEC2,
    GPU_INT_VEC3 = GL_INT_VEC3,
    GPU_INT_VEC4 = GL_INT_VEC4,
    GPU_UNSIGNED_INT_VEC2 = GL_UNSIGNED_INT_VEC2,
    GPU_UNSIGNED_INT_VEC3 = GL_UNSIGNED_INT_VEC3,
    GPU_UNSIGNED_INT_VEC4 = GL_UNSIGNED_INT_VEC4,
    GPU_BOOL_VEC2 = GL_BOOL_VEC2,
    GPU_BOOL_VEC3 = GL_BOOL_VEC3,
    GPU_BOOL_VEC4 = GL_BOOL_VEC4,
    GPU_FLOAT_MAT2 = GL_FLOAT_MAT2,
    GPU_FLOAT_MAT3 = GL_FLOAT_MAT3,
    GPU_FLOAT_MAT4 = GL_FLOAT_MAT4,
    GPU_FLOAT_MAT2x3 = GL_FLOAT_MAT2x3,
    GPU_FLOAT_MAT2x4 = GL_FLOAT_MAT2x4,
    GPU_FLOAT_MAT3x2 = GL_FLOAT_MAT3x2,
    GPU_FLOAT_MAT3x4 = GL_FLOAT_MAT3x4,
    GPU_FLOAT_MAT4x2 = GL_FLOAT_MAT4x2,
    GPU_FLOAT_MAT4x3 = GL_FLOAT_MAT4x3,
    GPU_SAMPLER_2D = GL_SAMPLER_2D,
    GPU_SAMPLER_3D = GL_SAMPLER_3D,
    GPU_SAMPLER_CUBE = GL_SAMPLER_CUBE,

    //GPU_INT_2_10_10_10_REV = GL_INT_2_10_10_10_REV,
    //GPU_UNSIGNED_INT_2_10_10_10_REV = GL_UNSIGNED_INT_2_10_10_10_REV,
    //GPU_UNSIGNED_SHORT_5_6_5 = GL_UNSIGNED_SHORT_5_6_5,
    //GPU_UNSIGNED_SHORT_4_4_4_4 = GL_UNSIGNED_SHORT_4_4_4_4,
    //GPU_UNSIGNED_SHORT_5_5_5_1 = GL_UNSIGNED_SHORT_5_5_5_1,
    //GPU_UNSIGNED_INT_10F_11F_11F_REV = GL_UNSIGNED_INT_10F_11F_11F_REV,
    //GPU_UNSIGNED_INT_5_9_9_9_REV = GL_UNSIGNED_INT_5_9_9_9_REV,
    //GPU_UNSIGNED_INT_24_8 = GL_UNSIGNED_INT_24_8,
    //GPU_FLOAT_32_UNSIGNED_INT_24_8_REV = GL_FLOAT_32_UNSIGNED_INT_24_8_REV,

    //GPU_SAMPLER_2D_SHADOW = GL_SAMPLER_2D_SHADOW,
    //GPU_SAMPLER_2D_ARRAY = GL_SAMPLER_2D_ARRAY,
    //GPU_SAMPLER_2D_ARRAY_SHADOW = GL_SAMPLER_2D_ARRAY_SHADOW,
    //GPU_SAMPLER_CUBE_SHADOW = GL_SAMPLER_CUBE_SHADOW,
    //GPU_INT_SAMPLER_2D = GL_INT_SAMPLER_2D,
    //GPU_INT_SAMPLER_3D = GL_INT_SAMPLER_3D,
    //GPU_INT_SAMPLER_CUBE = GL_INT_SAMPLER_CUBE,
    //GPU_INT_SAMPLER_2D_ARRAY = GL_INT_SAMPLER_2D_ARRAY,
    //GPU_UNSIGNED_INT_SAMPLER_2D = GL_UNSIGNED_INT_SAMPLER_2D,
    //GPU_UNSIGNED_INT_SAMPLER_3D = GL_UNSIGNED_INT_SAMPLER_3D,
    //GPU_UNSIGNED_INT_SAMPLER_CUBE = GL_UNSIGNED_INT_SAMPLER_CUBE,
    //GPU_UNSIGNED_INT_SAMPLER_2D_ARRAY = GL_UNSIGNED_INT_SAMPLER_2D_ARRAY,
};

enum GpuBufferDataType
{
    GPU_BUFFER_DATA_TYPE_INIT = 0,

    GPU_STREAM_DRAW = GL_STREAM_DRAW,
    GPU_STREAM_READ = GL_STREAM_READ,
    GPU_STREAM_COPY = GL_STREAM_COPY,
    GPU_STATIC_DRAW = GL_STATIC_DRAW,
    GPU_STATIC_READ = GL_STATIC_READ,
    GPU_STATIC_COPY = GL_STATIC_COPY,
    GPU_DYNAMIC_DRAW = GL_DYNAMIC_DRAW,
    GPU_DYNAMIC_READ = GL_DYNAMIC_READ,
    GPU_DYNAMIC_COPY = GL_DYNAMIC_COPY,
};

enum GpuBufferType
{
    GPU_BUFFER_TYPE_INIT = 0,

    GPU_ARRAY_BUFFER = GL_ARRAY_BUFFER,
    GPU_ELEMENT_ARRAY_BUFFER = GL_ELEMENT_ARRAY_BUFFER,
    // and more...
};

enum GpuShaderType
{
    GPU_SHADER_TYPE_INIT = 0,

    GPU_VERTEX_SHADER = GL_VERTEX_SHADER,
    GPU_FRAGMENT_SHADER = GL_FRAGMENT_SHADER,
    GPU_COMPUTE_SHADER = GL_COMPUTE_SHADER,
};

enum GpuTextureType
{
    GPU_TEXTURE_TYPE_INIT = 0,

    GPU_TEXTURE_2D = GL_TEXTURE_2D,
    GPU_TEXTURE_3D = GL_TEXTURE_3D,
    GPU_TEXTURE_2D_ARRAY = GL_TEXTURE_2D_ARRAY,
    GPU_TEXTURE_CUBE_MAP = GL_TEXTURE_CUBE_MAP,
    GPU_TEXTURE_2D_MULTISAMPLE = GL_TEXTURE_2D_MULTISAMPLE,
};

enum GpuTextureBaseFormat
{
    GPU_TEXTURE_BASE_FORMAT_INIT = 0,

    GPU_RED = GL_RED,
    GPU_RG = GL_RG,
    GPU_RGB = GL_RGB,
    GPU_RGBA = GL_RGBA,
    GPU_LUMINANCE = GL_LUMINANCE,
    GPU_LUMINANCE_ALPHA = GL_LUMINANCE_ALPHA,
    GPU_ALPHA = GL_ALPHA,
    GPU_DEPTH_COMPONENT = GL_DEPTH_COMPONENT,
    GPU_DEPTH_STENCIL = GL_DEPTH_STENCIL,
    GPU_RED_INTEGER = GL_RED_INTEGER,
    GPU_RG_INTEGER = GL_RG_INTEGER,
    GPU_RGB_INTEGER = GL_RGB_INTEGER,
    GPU_RGBA_INTEGER = GL_RGBA_INTEGER,
};

enum class PixelFormat
{
    PIXEL_FORMAT_INIT = 0,

    RED = GpuTextureBaseFormat::GPU_RED,
    RED_INTEGER = GpuTextureBaseFormat::GPU_RED_INTEGER,
    RG = GpuTextureBaseFormat::GPU_RG,
    RG_INTEGER = GpuTextureBaseFormat::GPU_RG_INTEGER,
    RGB = GpuTextureBaseFormat::GPU_RGB,
    RGB_INTEGER = GpuTextureBaseFormat::GPU_RGB_INTEGER,
    RGBA = GpuTextureBaseFormat::GPU_RGBA,
    RGBA_INTEGER = GpuTextureBaseFormat::GPU_RGBA_INTEGER,
    DEPTH_COMPONENT = GpuTextureBaseFormat::GPU_DEPTH_COMPONENT,
    DEPTH_STENCIL = GpuTextureBaseFormat::GPU_DEPTH_STENCIL,
    ALPHA = GpuTextureBaseFormat::GPU_ALPHA,
    LUMINANCE_ALPHA = GpuTextureBaseFormat::GPU_LUMINANCE_ALPHA,
    LUMINANCE = GpuTextureBaseFormat::GPU_LUMINANCE,
};

enum class PixelDataType
{
    PIXEL_DATA_TYPE_INIT = 0,

    UNSIGNED_BYTE = GpuDataType::GPU_UNSIGNED_BYTE,
    BYTE = GpuDataType::GPU_BYTE,
    UNSIGNED_SHORT = GpuDataType::GPU_UNSIGNED_SHORT,
    SHORT = GpuDataType::GPU_SHORT,
    UNSIGNED_INT = GpuDataType::GPU_UNSIGNED_INT,
    INT = GpuDataType::GPU_INT,
    HALF_FLOAT = GpuDataType::GPU_HALF_FLOAT,
    FLOAT = GpuDataType::GPU_FLOAT,

    //UNSIGNED_SHORT_5_6_5 = GpuDataType::GPU_UNSIGNED_SHORT_5_6_5,
    //GL_UNSIGNED_SHORT_5_6_5, GL_UNSIGNED_SHORT_4_4_4_4, GL_UNSIGNED_SHORT_5_5_5_1, GL_UNSIGNED_INT_2_10_10_10_REV, GL_UNSIGNED_INT_10F_11F_11F_REV, GL_UNSIGNED_INT_5_9_9_9_REV, GL_UNSIGNED_INT_24_8, and GL_FLOAT_32_UNSIGNED_INT_24_8_REV.
};

enum class GpuTextureMagFilterMode
{
    GPU_TEXTURE_MAG_FILTER_MODE_INIT = 0,

    NEAREST = GL_NEAREST,
    LINEAR = GL_LINEAR,
};

enum class GpuTextureMinFilterMode
{
    GPU_TEXTURE_MIN_FILTER_MODE_INIT = 0,

    NEAREST = GL_NEAREST,
    LINEAR = GL_LINEAR,
    NEAREST_MIPMAP_NEAREST = GL_NEAREST_MIPMAP_NEAREST,
    LINEAR_MIPMAP_NEAREST = GL_LINEAR_MIPMAP_NEAREST,
    NEAREST_MIPMAP_LINEAR = GL_NEAREST_MIPMAP_LINEAR,
    LINEAR_MIPMAP_LINEAR = GL_LINEAR_MIPMAP_LINEAR,
    // http://docs.gl/es3/glTexParameter
};

enum GpuTextureWrapMode
{
    GPU_TEXTURE_WRAP_MODE_INIT = 0,

    REPEAT = GL_REPEAT,
    CLAMP_TO_EDGE = GL_CLAMP_TO_EDGE,
    MIRRORED_REPEAT = GL_MIRRORED_REPEAT,
};


} // end of namespace TRL